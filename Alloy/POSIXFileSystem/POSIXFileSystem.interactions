We found a semantic interaction between the list operation
and symbolic links. Using an assertion (which is feature-based;
in feature List), 
we state and check that a list operation does not ‘jump’ between 
ﬁle systems. We used a derivative to disallow the list operation
to follow symbolic links and to introduce an extended list
operation that may bridge ﬁle systems (DerivativeSymlinksAndList).

Block management interacts with ﬁle system operations. File system
operations such as remove change the ﬁle system structure. If
there is block management, the mapping between index nodes
and ﬁles has to be kept consistent. We achieve consistency
by applying additional code (DerivativeBlocksAndFilesystem)
that synchronize
ﬁle-system changes with the underlying blocks. The problem is
to detect the interactions between block management and ﬁlesystem operations. 
A corresponding assertion has to be aware
of both the changes the operations apply and the underlying
block management. Hence, the assertion code it not modular
in the sense that it can be assigned to a single feature 
(TestBlocksAndCreate, TestBlocksAndMove, TestBlocksAndRemove).
In other words, the specification is not feature-based.