module check

imports
  libstratego-lib
  include/Exprlang
  lib/editor-common.generated
  modifyAst

rules

  analyze:
    t -> t'
    with
    	<topdown(try(record-program))> t;
    	t' := <modify> t    	

  record-program:
    Assign(x, e) -> Assign(x, e)
    with      
      rules(
        GetAssign :+ x -> x        
      )

  record-program:
  	VarDec(x, Type(t)) -> VarDec(x, Type(t))
  	with  		
  		rules(
  			GetVar :+ x -> x  			
  			GetVarType :+ x -> Type(t)
  	  )

  constraint-error:
    Assign(x, _) -> (x, $[Die Variable [x] ist nicht definiert])
    where    	
      not(<GetVar> x)
            
  constraint-error:
  	Assign(x, e) -> (e, $[Für [x] kann kein eindeutiger Typ ermittelt werden])
  	where
  	 	not(<typeof> e)
    
  constraint-error:
  	Assign(x, e){t} -> (x, $[[x] hat den Typ [t'], der ermittelte Typ ist aber [t'']])
  	where
  		<bagof-GetVar> x => [_]; 	 	
  	 	t' := <getType > (<fetch-elem(id)> (<bagof-GetVarType> x));
  	 	t'' := <getType> t;
  	 	not(!t' => t'')

  constraint-warning:
  	Assign(x, _) -> (x, $[Die Variable der Zuweisung muss mit Großbuchstabe beginnen])  
    where
      not(<string-starts-with-capital> x)

  constraint-error:
    VarDec(x, Type(type)) -> (type, $[Der Typ [type] ist nicht definiert])
    where
      not(!type => "String"); 
      not(!type => "Int")
  
  constraint-error:
    VarDec(x, _) -> (x, $[Die Variable [x] ist mehrfach deklariert])
    where
      not(<bagof-GetVar> x => [_])
  
  constraint-note:
    VarDec(x, t) -> (x, $[Deklarationsanweisung])
  
  constraint-error:
  	Var(x) -> (x, $[Die Variable [x] ist nicht definiert])
  	where
  		not(<GetVar> x)