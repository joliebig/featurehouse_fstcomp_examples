module resolve
imports
	
  libstratego-lib 
  include/MoBL 
  lookup 
  analyze 
  type
	strategies 

  add-tl-namespaces :
    Application(qid, def*) -> Application(qid, <map(try(add-tl-namespace))> def*) 

  add-tl-namespaces :
    Module(qid, def*) -> Module(qid, <map(try(add-tl-namespace))> def*) 

  add-tl-namespace :
    Screen(manno*, x, farg*, rt, elem*) -> Screen(manno*, QId(<ModuleName>, x), farg*, rt, elem*)
    where <is-string> x 

  add-tl-namespace :
    ExternalScreen(manno*, x, farg*, rt) -> ExternalScreen(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x 

  add-tl-namespace :
    Entity(manno*, x, super, prop*) -> Entity(manno*, QId(<ModuleName>, x), super, prop*)
    where <is-string> x 

  add-tl-namespace :
    ExternalEntity(manno*, x, super, prop*) -> ExternalEntity(manno*, QId(<ModuleName>, x), super, prop*)
    where <is-string> x 

  add-tl-namespace :
    ExternalFunction(manno*, x, farg*, rt) -> ExternalFunction(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x 

  add-tl-namespace :
    ExternalSyncFunction(manno*, x, farg*, rt) -> ExternalSyncFunction(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x 

  add-tl-namespace :
    Function(manno*, x, farg*, rt, stat*) -> Function(manno*, QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x 

  add-tl-namespace :
    SyncFunction(manno*, x, farg*, rt, stat*) -> SyncFunction(manno*, QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x 

  add-tl-namespace :
    ExternalGenericType(manno*, x, t*, method*) -> ExternalGenericType(manno*, QId(<ModuleName>, x), t*, method*)
    where <is-string> x 

  add-tl-namespace :
    ExternalType(manno*, x, super, method*) -> ExternalType(manno*, QId(<ModuleName>, x), super, method*)
    where <is-string> x 

  add-tl-namespace :
    Type(manno*, x, super, method*) -> Type(manno*, QId(<ModuleName>, x), super, method*)
    where <is-string> x 

  add-tl-namespace :
    Control(manno*, x, farg*, elem*) -> Control(manno*, QId(<ModuleName>, x), farg*, elem*)
    where <is-string> x 

  add-tl-namespace :
    ExternalControl(manno*, x, farg*) -> ExternalControl(manno*, QId(<ModuleName>, x), farg*)
    where <is-string> x 

  add-tl-namespace :
    ExternalVarDecl(x, t) -> ExternalVarDecl(QId(<ModuleName>, x), t)
    where <is-string> x 

  add-tl-namespace :
    VarDecl(x, t, e) -> VarDecl(QId(<ModuleName>, x), t, e)
    where <is-string> x 

  add-tl-namespace :
    VarDeclInferred(x, e) -> VarDeclInferred(QId(<ModuleName>, x), e)
    where <is-string> x 

  add-tl-namespace :
    Call(_, _) -> <id> 

  add-tl-namespace :
    MethodCall(_, _, _) -> <id> 

  add-tl-namespace :
    Javascript(js) -> ModuleJavascript(<ModuleName>, js) 

  add-tl-namespace :
    JavascriptFor(x, js) -> ModuleJavascriptFor(<ModuleName>, QId(<ModuleName>, x), js)
    where <is-string> x 

  add-tl-namespace :
    Service(manno*, x, selem*) -> Service(manno*, QId(<ModuleName>, x), selem*)
    where <is-string> x rules 

  add-namespace-all =
    alltd(add-namespace) 

  add-namespace :
    SimpleType(qid) -> SimpleType(<alternatives(|alternatives)> qid2)
    where not(lookup-type-aux)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    Var(qid) -> Var(<alternatives(|alternatives)> qid2)
    where <is-string> qid
    where not(<lookup-type-aux> SimpleType(qid))
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    Var(qid{}) -> Var(<alternatives(|alternatives)> qid2)
    where <is-string> qid
    where not(<lookup-control-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-control-aux; !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    Var(qid{}) -> Var(<alternatives(|alternatives)> qid2)
    where <is-string> qid
    where not(<lookup-function-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-function-aux; !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    Var(qid{}) -> Var(<alternatives(|alternatives)> qid2)
    where <is-string> qid
    where not(<lookup-global-var-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-global-var-aux; !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    Assignment(qid, e) -> Assignment(<alternatives(|alternatives)> qid2, <add-namespace-all> e)
    where <is-string> qid
    where not(<lookup-global-var-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-global-var-aux; !newid})> [<ModuleName>|<bagof-Imports>] 

  add-namespace :
    GenericType(qid, t*) -> GenericType(<alternatives(|alternatives)> qid2, t2*)
    where not(lookup-type-aux)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> GenericType(<id>, t*); !newid})> [<ModuleName>|<bagof-Imports>]
        ; t2* := <alltd(add-namespace)> t* 

  add-namespace :
    CollectionCons(qid, t*, e*) -> CollectionCons(<alternatives(|alternatives)> qid2, t2*, e2*)
    where not(<lookup-type-aux> GenericType(qid, t*))
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> GenericType(<id>, t*); !newid})> [<ModuleName>|<bagof-Imports>]
        ; t2* := <alltd(add-namespace)> t*
        ; e2* := <alltd(add-namespace)> e* 

  add-namespace :
    Call(qid, e*) -> Call(<alternatives(|alternatives)> qid2, e2*)
    where not(<lookup-function-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-function-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e* 

  add-namespace :
    Call(qid, e*) -> Call(<alternatives(|alternatives)> qid2, e2*)
    where not(<lookup-screen-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-screen-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e* 

  add-namespace :
    Call(qid, e*) -> Call(<alternatives(|alternatives)> qid2, e2*)
    where not(<lookup-type-aux> SimpleType(qid))
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; !SimpleType(newid); lookup-type-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e* 

  add-namespace :
    Call(qid, e*) -> Call(<alternatives(|alternatives)> qid2, e2*)
    where <is-string> qid
    where not(<lookup-global-var-aux> qid)
        ; [qid2|alternatives] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-global-var-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e* 

  alternatives(|alt*) :
    qid@QId(_, x) -> x{Alternatives([qid|alt*])}
    where not([] := alt*) 

  alternatives(|alt*) :
    t -> t
    where [] := alt* 

  prefix-qid(|qid) :
    qid2 -> QId(qid, qid2)
    where is-string 

  prefix-qid(|qid) :
    QId(q, x) -> QId(<prefix-qid(|qid)> q, x)
