module generation-css

imports
  libstratego-lib
  include/MoBL
  generation-emit
  generation-compile
  generation-action

rules

  definition-to-js :
    Style(_, sel*, prop*) -> <emit-css>
    $[[<map(sel-to-css; <concat-strings> [".", <id>]); separate-by(|" ") <+ debug(!"Could not generate for: "); fail> sel*] {
        [<map(style-prop-to-css); separate-by(|"\n") <+ debug(!"Could not generate for: "); fail> prop*]
      }
      ]
    with qid := <reverse; Hd; ?_#([<id>|_])> sel*
    with <emit> $[[<qid-to-js> qid] = '[<qid-to-css> qid]';
]

  sel-to-css :
    StyleSelector(qid) -> <qid-to-css> qid

  sel-to-css :
    StyleSelectorWithPseudo(qid, pt) -> $[[<qid-to-css> qid]:[pt]]

  sel-to-css :
    StyleSelectorWithPseudoArg(qid, pt, arg) -> $[[<qid-to-css> qid]:[pt]([arg])]

  qid-to-css :
    s -> s
    where is-string

  qid-to-css :
    QId(qid, x) -> $[[<qid-to-css> qid]__[x]]

  style-prop-to-css :
    StyleProperty(x, e) -> $[[x]: [<style-exp-to-css> e];]

  style-exp-to-css :
    StyleCall(x, e*) -> $[[x]([<map(style-exp-to-css); separate-by(|", ")> e*])]

  style-exp-to-css :
    Num(n) -> n

  style-exp-to-css :
    NumUnit(n, unit) -> $[[n][<unit-to-css> unit]]

  style-exp-to-css :
    StyleId(x) -> x

  style-exp-to-css :
    Color(x) -> x

  style-exp-to-css :
    String(s) -> s

  style-exp-to-css :
    StylePath(p, p*) -> $[[p]/[<separate-by(|"/"); concat-strings> p*]]

  style-exp-to-css :
    StyleExps(e*) -> <map(style-exp-to-css); separate-by(|" "); concat-strings> e*

  style-exp-to-css :
    StyleExpsCS(e*) -> <map(style-exp-to-css); separate-by(|", "); concat-strings> e*

  unit-to-css :
    EmUnit() -> "em"

  unit-to-css :
    PxUnit() -> "px"

  unit-to-css :
    PtUnit() -> "pt"

  unit-to-css :
    SUnit() -> "s"

  unit-to-css :
    PercentageUnit() -> "%"