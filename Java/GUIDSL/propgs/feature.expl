propgs encapsulates a traversal of harvested gspec objects, and
it propagates constraints.  For example, it make sure that when
variables have a corresponding gObj, they have the same name and
that these objects point to each other.  Another constraint is
that a production is referenced only once in a grammar.  This
could be a normal reference (P), a star reference (P*), an
optional reference ([P]), or a plus reference (P+).  This information
is entered into a field of each production object.

The actions that are performed during propagation is defined in
the visitor propcons.jak, which has a method for every gspec
class.

The Main class of this layer extends the process method.
After fillgs fills in gspec objects, the propgs layer walks
the gspec objects and propagates constraints as described above.
At this point, all information should have been harvested from
the ASTs and correctly stored into gspec objects.  From this
point on, we need to generate a GUI and implement an LTMS.

The next layer is printgs.

