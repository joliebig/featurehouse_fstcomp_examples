/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/***************************************************************************
   This is an extension of a Java1.4 grammar with support for the additional
   constructs of AspectJ, an aspect-oriented programming language, version
   1.0.  For more information, see http://www.aspectj.org.
   
   I have not been able to locate a complete BNF grammar for the language,
   so this grammar is based on my own understanding and the AspectJ 1.0.6
   draft quick reference sheet, which includes some grammar rules.
   
   NOTE: This is a research project and has not been tested for language
   completeness.  It is likely to be incomplete and may contain errors.
   
   RESERVED WORDS.  This parser treats the following AspectJ keywords as
   reserved words:

   after around aspect before declare dominates issingleton percflow
   percflowbelow pertarget perthis pointcut privileged proceed returning
   thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart
   throwing

   LIMITATION:

   -- When using the * operator, for example to multiply two integers, you
      must separate the * from the operands by whitespace.  This is because
      any string containing a * along with any letters or digits is assumed
      by the tokenizer to be an identifier pattern. :(


  **************************************************************************

  This AspectJ grammar is based on a Java grammar hacked by Sriram Sankar,
  David Williams, Marco Savard (marco.savard@magna-solutions.de) and Andrea
  Gini (ginian@tiscali.it), apparently in that order.  That Java grammar is
  available from the JavaCC grammar repository at:
  http://www.cobase.cs.ucla.edu/pub/javacc/#Jsection and is dated 5/5/2002
  there.

  **************************************************************************

  Shimon Rura, Jan 27 2003
  shimon@rura.org

****************************************************************************/

options {
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
}



PARSER_BEGIN(AspectJParser)

public class AspectJParser {
  
    public static final String parserName = "AspectJ Parser 1.0.1";

    /** Utility function for checking that an IDENTIFIER token is really a certain word */
    protected boolean tokenIs(String s) {
        return getToken(1).image.equals(s);
    }
}

PARSER_END(AspectJParser)


/* WHITE SPACE */
SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* RESERVED WORDS AND LITERALS */
TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
// When the following line is commented out, the parser does not treat
// "assert" as a reserved word
//| < ASSERT: "assert" > // added by Andrea Gini for Java 1.4
}


/* AspectJ reserved words */
TOKEN :
{
  < AFTER: "after" >
| < AROUND: "around" >
| < ASPECT: "aspect" >
| < BEFORE: "before" >
| < DECLARE: "declare" >
| < DOMINATES: "dominates" >
| < ISSINGLETON: "issingleton" >
| < PERCFLOW: "percflow" >
| < PERCFLOWBELOW: "percflowbelow" >
| < PERTARGET: "pertarget" >
| < PERTHIS: "perthis" >
| < POINTCUT: "pointcut" >
| < PRIVILEGED: "privileged" >
| < PROCEED: "proceed" >
| < RETURNING: "returning" >
| < THISJOINPOINT: "thisJoinPoint" >
| < THISJOINPOINTSTATICPART: "thisJoinPointStaticPart" >
| < THISENCLOSINGJOINPOINTSTATICPART: "thisEnclosingJoinPointStaticPart" >
| < THROWING: "throwing" >
// The following are treated by the tokenizer as <IDENTIFIER>s
// | < ARGS: "args" >
// | < CALL: "call" >
// | < CFLOW: "cflow" >
// | < CFLOWBELOW: "cflowbelow" >
// | < ERROR: "error" >
// | < EXECUTION: "execution" >
// | < GET: "get" >
// | < HANDLER: "handler" >
// | < INITIALIZATION: "initialization" >
// | < PARENTS: "parents" >
// | < SET: "set" >
// | < SOFT: "soft" >
// | < STATICINITIALIZATION: "staticinitialization" >
// | < TARGET: "target" >
// | < WARNING: "warning" >
// | < WITHIN: "within" >
// | < WITHINCODE: "withincode" >
}

/* AspectJ separators */
TOKEN :
{
  < DOTDOT: ".." >
}

/* LITERALS */
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* LETTER AND DIGIT */



/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
                   // This must not match "*" alone because that is for multiplication!
  < IDENTIFIERPATTERN: (<LETTER>|<DIGIT>)(<LETTER>|<DIGIT>|"*")* 
                   |   ("*")(<LETTER>|<DIGIT>|"*")+
                   >
|
  < LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/************************************
 * THE LANGUAGE GRAMMAR STARTS HERE *
 ************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>
}

void PackageDeclaration() :
{}
{
  "package" Name() ";"
}

void ImportDeclaration() :
{}
{
  "import" Name() [ "." "*" ] ";"
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD(5, ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration()
|
  LOOKAHEAD(6, [ "privileged" ] ( "abstract" | "final" | "public" | "strictfp" | "privileged" )* "aspect" )
  AspectDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}

  /************************/
 /* the aspect construct */
/************************/
void AspectDeclaration() :
{}
{
  ( "abstract" | "final" | "public" | "strictfp" | "privileged")*
  UnmodifiedAspectDeclaration()
}

void UnmodifiedAspectDeclaration() :
{}
{
  "aspect" <IDENTIFIER> 
      [ "extends" Name() ] 
      [ "implements" NameList() ]
      [ "dominates" NameList() ] 
      [ "percflow" "(" PointcutExpression() ")"]
  AspectBody()
}

void AspectBody() :
{}
{
  "{" ( AspectBodyDeclaration() )* "}"
}

void NestedAspectDeclaration() :
{}
{
  [ "privileged" ]
  ( "public" | "protected" | "private" | "strictfp")*
  "static"
  UnmodifiedAspectDeclaration()
}



void AspectBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | 
               "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | 
               "protected" | "private" | "strictfp")* 
             "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( ( "public" | "protected" | "private" | "strictfp")*
               "static" "aspect" )
  NestedAspectDeclaration()
|
  LOOKAHEAD( PointcutDeclarationLookahead() )
  PointcutDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( AdviceDeclarationLookahead() )
  AdviceDeclaration()
|
  LOOKAHEAD( InterTypeConstructorDeclarationLookahead() )
  InterTypeConstructorDeclaration()
|
  LOOKAHEAD( InterTypeMethodDeclarationLookahead() )
  InterTypeMethodDeclaration()
|
  AspectFieldDeclaration() // allows either introduced or local vars
|
  InterTypeDeclare()
|
  ";"
}

void AspectFieldDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() AspectVariableDeclarator() ( "," AspectVariableDeclarator() )* ";"
}

void AspectVariableDeclarator() :
{}
{
  AspectVariableDeclaratorId() [ "=" VariableInitializer() ]
}

void AspectVariableDeclaratorId() :  //allows possibility of inter-type declaration
{}
{
  [ LOOKAHEAD(TypePatternDot()) TypePatternDot() ] <IDENTIFIER> ( "[" "]" )*
}


// This production is to determine lookahead only.
void InterTypeMethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() TypePatternDot() <IDENTIFIER> "("
}

void InterTypeConstructorDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  TypePatternDot() "new" "("
}


void InterTypeMethodDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() InterTypeMethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void InterTypeConstructorDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "final" | "native" | "synchronized" | "strictfp")*
  InterTypeConstructorDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}


void InterTypeMethodDeclarator() :
{}
{ 
  TypePatternDot() <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void InterTypeConstructorDeclarator() :
{}
{ 
  TypePatternDot() "new" FormalParameters() ( "[" "]" )*
}


void InterTypeDeclare() :
{}
{
  "declare" InterTypeDeclareBody() ";"
}

void InterTypeDeclareBody() :
{}
{
  LOOKAHEAD(<IDENTIFIER>, { tokenIs("parents") })
  <IDENTIFIER> ":" TypePattern() [ "extends" Name() | "implements" NameList() ]

| LOOKAHEAD(<IDENTIFIER>, { tokenIs("warning") || tokenIs("error") })
  <IDENTIFIER> ":" PointcutExpression() ":" Expression()

| LOOKAHEAD(<IDENTIFIER>, { tokenIs("soft") })
  <IDENTIFIER> ":" TypePattern() ":" PointcutExpression()

| LOOKAHEAD(<IDENTIFIER>, { tokenIs("precedence") })
  <IDENTIFIER> ":" TypePatternList()
}

void PointcutExpression() :
{}
{
  LOOKAHEAD(SimplePointcutExpression() "&&") SimplePointcutExpression() "&&" PointcutExpression()
| LOOKAHEAD(SimplePointcutExpression() "||") SimplePointcutExpression() "||" PointcutExpression()
| SimplePointcutExpression()
}

void SimplePointcutExpression() :
{}
{
  PrimitivePointcut()
| PointcutCall()
| "(" PointcutExpression() ")"
| "!" PointcutExpression()
}

void PointcutCall() : 
{}
{
  <IDENTIFIER> Arguments()
}

void AdviceType() :
{}
{
  "before" FormalParameters() [ "throws" NameList() ]
| LOOKAHEAD("after" FormalParameters() "returning")
    "after" FormalParameters() "returning" [ "(" [FormalParameter()] ")" ] [ "throws" NameList() ]
| LOOKAHEAD("after" FormalParameters() "throwing")
    "after" FormalParameters() "throwing" [ "(" [FormalParameter()] ")" ] [ "throws" NameList() ]
| "after" FormalParameters() [ "throws" NameList() ]
| ResultType() "around" FormalParameters() [ "throws" NameList() ]
}

void AdviceDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "synchronized" | "strictfp")*
  ("before"|"after"| ResultType() "around")
}

/** According to the reference sheet, AspectJ will only accept the strictfp
 * modifier before advice, but the ajc compiler will accept protected, etc.,
 * so they are supported here.
 */
void AdviceDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "synchronized" | "strictfp")*
  AdviceType() ":" PointcutExpression() Block()
}


// This production is to determine lookahead only.
void PointcutDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "abstract" | "final" )* 
    "pointcut"
}

void PointcutDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "abstract" | "final" )*
    "pointcut"
    <IDENTIFIER> FormalParameters()
    [ ":" PointcutExpression() ] 
    ";" 
}

void PrimitivePointcut() :
{}
{   
    // Primitive pointcuts taking a ConstructorPattern
      LOOKAHEAD(<IDENTIFIER> "(" ConstructorPattern()")", 
                { tokenIs("call") 
                    || tokenIs("execution") 
                    || tokenIs("initialization") 
                    || tokenIs("withincode") 
                    }) 
      <IDENTIFIER> "(" ConstructorPattern()")" 

    // Primitive pointcuts taking a MethodPattern
    | LOOKAHEAD(<IDENTIFIER> "(" MethodPattern()")",
                { tokenIs("call") 
                    || tokenIs("execution") 
                    || tokenIs("withincode") 
                    })
      <IDENTIFIER> "(" MethodPattern()")"

    // Primitive pointcuts taking a TypePattern
    | LOOKAHEAD((<THIS>|<IDENTIFIER>)  "(" TypePatternList() ")",
                { tokenIs("staticinitialization")
                    || tokenIs("handler")
                    || tokenIs("within")

                    // TypePattern() might really be an identifier for the
                    // following 3 cases, can't distinguish yet

                    || tokenIs("this") // just a hack to make lookahead
                                       // work; not really necessary
                    || tokenIs("target")
                    || tokenIs("args")
                    })
      (<THIS>|<IDENTIFIER>) "(" TypePatternList() ")"

    // Primitive pointcuts taking a FieldPattern
    | LOOKAHEAD(<IDENTIFIER>  "(" FieldPattern() ")",
                { tokenIs("get")
                    || tokenIs("set")
                    })
      <IDENTIFIER> "(" FieldPattern() ")"

    // Primitive pointcuts taking a PointcutExpression
    | LOOKAHEAD(<IDENTIFIER>  "(" PointcutExpression() ")",
                { tokenIs("cflow")
                    || tokenIs("cflowbelow")
                    })
      <IDENTIFIER> "(" PointcutExpression() ")"

    // last item: if it begins with "if", go for it
    | LOOKAHEAD({ tokenIs("if") }) 
      <IDENTIFIER> "(" Expression() ")"
}

void IdentifierPattern() :
{}
{
  (<IDENTIFIER>|<IDENTIFIERPATTERN>|<STAR>)
}

void FieldPattern() :
{}
{ [ LOOKAHEAD(2) ModifiersPattern() ] TypePattern() 
    [ LOOKAHEAD(TypePatternDot()) TypePatternDot() ] 
    IdentifierPattern() }

void MethodPattern() :
{}
{
  [ LOOKAHEAD(2) ModifiersPattern() ] TypePattern() 
    [ LOOKAHEAD(TypePatternDot()) TypePatternDot() ] 
    IdentifierPattern()
    "(" TypePatternList() ")"
    [ "throws" ThrowsPattern() ]
}

void ConstructorPattern() :
{}
{ 
  [ LOOKAHEAD(1) ModifiersPattern() ]
    [ LOOKAHEAD(TypePatternDot()) TypePatternDot() ]
    "new"
    "(" TypePatternList() ")"
    [ "throws" ThrowsPattern() ]
}


void ThrowsPattern() :
{}
{
  TypePattern()
}

//examples:
//  public void baz(..) );
//  !public void baz(..) );
//  public !static void baz(..) );

void ModifiersPattern() :
{}
{
  (LOOKAHEAD(2) // must match ! and possibly a real modifier token
   [ "!" ] ( "public" | "protected" | "private" | "static" | "abstract" 
             | "final" | "native" | "synchronized" | "strictfp"))+
}

//examples:
// *baz*bar*..guug
//  Public pointcut test6(): call (  void *baz*bar*..guug*.bfd.as*.*(..) );
// *baz*bar*..*.guug*.bfd.as*.*(..)

void BasicTypePattern() :
{}
{
  PrimitiveType() ("[" "]")* | "void"
| IdentifierPattern() [LOOKAHEAD(1) "+" ] (LOOKAHEAD(1) "[" "]")* 
    (LOOKAHEAD(1) ( "." | ".." ) IdentifierPattern() [LOOKAHEAD(1) "+" ] (LOOKAHEAD(1) "[" "]" )* )* 
    // OK to continue if DOT or DOTDOT present
| "!" TypePattern()
| "(" TypePattern() ")"
}

void TypePattern() :
{}
{
  LOOKAHEAD(BasicTypePattern() "&&") BasicTypePattern() "&&" TypePattern()
| LOOKAHEAD(BasicTypePattern() "||") BasicTypePattern() "||" TypePattern()
| BasicTypePattern()
}

void BasicTypePatternDot() :
{}
{
  (PrimitiveType() ("[" "]")* | "void") "."
| ( LOOKAHEAD( IdentifierPattern() [ "+" ] ("[" "]")* ("."|"..") )
               IdentifierPattern() [ "+" ] ("[" "]")* ("."|"..")  )+
| "!" TypePatternDot()
| "(" TypePattern() ")" ("."|"..")
}

void TypePatternDot() :
{}
{
  LOOKAHEAD(BasicTypePattern() "&&") BasicTypePattern() "&&" TypePatternDot()
| LOOKAHEAD(BasicTypePattern() "||") BasicTypePattern() "||" TypePatternDot()
| BasicTypePatternDot()
}

void TypePatternList() :
{}
{
  [ ( TypePattern() | ".." ) ( "," (TypePattern() | ".." ))* ]
}

/* Following is unmodified from Java grammar */

/**************************************************/

/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  ( "abstract" | "final" | "public" | "strictfp")*
  UnmodifiedClassDeclaration()
}

void UnmodifiedClassDeclaration() :
{}
{
  "class" <IDENTIFIER> [ "extends" Name() ] [ "implements" NameList() ]
  ClassBody()
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedClassDeclaration()
}


void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | 
               "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | 
               "protected" | "private" | "strictfp")* 
             "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( ( "public" | "protected" | "private" | "strictfp")*
               "static" "aspect" )
  NestedAspectDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( PointcutDeclarationLookahead() )
  PointcutDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" | "strictfp")*
  UnmodifiedInterfaceDeclaration()
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}
/* Modified by Andrea Gini 2 
 * According to rules InterfaceBody and InterfaceBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 
void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( ( "public" | "protected" | "private" | "strictfp")*
               "static" "aspect" )
  NestedAspectDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}

void FieldDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  <IDENTIFIER> ( "[" "]" )*
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator() :
{}
{
  <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  [ "final" ] Type() VariableDeclaratorId()
}

void FormalReturingThrowingParameter() :
{}
{
	[FormalParameter()]
}


void ConstructorDeclaration() :
{}
{
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer() :
{}
{
  [ "static" ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
  ( PrimitiveType() | Name() ) ( "[" "]" )*
}

void PrimitiveType() :
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
}

void ResultType() :
{}
{
  "void"
|
  Type()
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression())*
}

void UnaryExpression() :
{}
{
  ( "+" | "-") UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  "this"
| 
  "thisJoinPoint" | "thisJoinPointStaticPart" | "thisEnclosingJoinPointStaticPart" | "proceed" // AspectJ
|
  "super" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()
}

/* Add "." "super" to be compatible with Java 1.2, 
 * Modified by Marco Savard
 */ 
void PrimarySuffix() :
{}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." "super"  
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
// added by Andrea Gini
|
  AssertStatement()
}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()
|
  UnmodifiedClassDeclaration()
|
  UnmodifiedInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{}
{
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

// added by Andrea Gini
void AssertStatement() :
{}
{
   "assert" Expression() [ ":" Expression() ] ";"
}
