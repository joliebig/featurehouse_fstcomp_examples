package ajparser;
/* Generated By: Java; tab-width&JavaCC: Do not edit this line. AspectJParser.java */
public class AspectJParser implements AspectJParserConstants {

    public static  String parserName = "AspectJ Parser 1.0.1";

    /** Utility function for checking that an IDENTIFIER token is really a certain word */
    protected boolean tokenIs(String s) {
        return getToken(1).image.equals(s);
    }

/************************************
 * THE LANGUAGE GRAMMAR STARTS HERE *
 ************************************/

/*
 * Program structuring syntax follows.
 */
   public void CompilationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      ImportDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case PUBLIC:
      case STRICTFP:
      case ASPECT:
      case PRIVILEGED:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      TypeDeclaration();
    }
    jj_consume_token(0);
  }

   public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
    Name();
    jj_consume_token(SEMICOLON);
  }

   public void ImportDeclaration() throws ParseException {
    jj_consume_token(IMPORT);
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   public void TypeDeclaration() throws ParseException {
    if (jj_2_1(5)) {
      ClassDeclaration();
    } else if (jj_2_2(6)) {
      AspectDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PUBLIC:
      case STRICTFP:
        InterfaceDeclaration();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /************************/
 /* the aspect construct */
/************************/
   public void AspectDeclaration() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case STRICTFP:
      case PRIVILEGED:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      case PRIVILEGED:
        jj_consume_token(PRIVILEGED);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedAspectDeclaration();
  }

   public void UnmodifiedAspectDeclaration() throws ParseException {
    jj_consume_token(ASPECT);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      Name();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      NameList();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOMINATES:
      jj_consume_token(DOMINATES);
      NameList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERCFLOW:
      jj_consume_token(PERCFLOW);
      jj_consume_token(LPAREN);
      PointcutExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    AspectBody();
  }

   public void AspectBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case STRICTFP:
      case AFTER:
      case BEFORE:
      case DECLARE:
      case POINTCUT:
      case PRIVILEGED:
      case IDENTIFIER:
      case IDENTIFIERPATTERN:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case STAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      AspectBodyDeclaration();
    }
    jj_consume_token(RBRACE);
  }

   public void NestedAspectDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVILEGED:
      jj_consume_token(PRIVILEGED);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(STATIC);
    UnmodifiedAspectDeclaration();
  }

   public void AspectBodyDeclaration() throws ParseException {
    if (jj_2_3(2)) {
      Initializer();
    } else if (jj_2_4(2147483647)) {
      NestedClassDeclaration();
    } else if (jj_2_5(2147483647)) {
      NestedInterfaceDeclaration();
    } else if (jj_2_6(2147483647)) {
      NestedAspectDeclaration();
    } else if (jj_2_7(2147483647)) {
      PointcutDeclaration();
    } else if (jj_2_8(2147483647)) {
      MethodDeclaration();
    } else if (jj_2_9(2147483647)) {
      ConstructorDeclaration();
    } else if (jj_2_10(2147483647)) {
      AdviceDeclaration();
    } else if (jj_2_11(2147483647)) {
      InterTypeConstructorDeclaration();
    } else if (jj_2_12(2147483647)) {
      InterTypeMethodDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        AspectFieldDeclaration();
        break;
      case DECLARE:
        InterTypeDeclare();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void AspectFieldDeclaration() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Type();
    AspectVariableDeclarator();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      AspectVariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

   public void AspectVariableDeclarator() throws ParseException {
    AspectVariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

   public void AspectVariableDeclaratorId() throws ParseException {
    if (jj_2_13(2147483647)) {
      TypePatternDot();
    } else {
      ;
    }
    jj_consume_token(IDENTIFIER);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

// This production is to determine lookahead only.
   public void InterTypeMethodDeclarationLookahead() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    TypePatternDot();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

   public void InterTypeConstructorDeclarationLookahead() throws ParseException {
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    TypePatternDot();
    jj_consume_token(NEW);
    jj_consume_token(LPAREN);
  }

   public void InterTypeMethodDeclaration() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    InterTypeMethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void InterTypeConstructorDeclaration() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    InterTypeConstructorDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void InterTypeMethodDeclarator() throws ParseException {
    TypePatternDot();
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_13;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

   public void InterTypeConstructorDeclarator() throws ParseException {
    TypePatternDot();
    jj_consume_token(NEW);
    FormalParameters();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_14;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

   public void InterTypeDeclare() throws ParseException {
    jj_consume_token(DECLARE);
    InterTypeDeclareBody();
    jj_consume_token(SEMICOLON);
  }

   public void InterTypeDeclareBody() throws ParseException {
    if (jj_2_14(2147483647) && (tokenIs("parents"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      TypePattern();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case IMPLEMENTS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          Name();
          break;
        case IMPLEMENTS:
          jj_consume_token(IMPLEMENTS);
          NameList();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } else if (jj_2_15(2147483647) && (tokenIs("warning") || tokenIs("error"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      PointcutExpression();
      jj_consume_token(COLON);
      Expression();
    } else if (jj_2_16(2147483647) && (tokenIs("soft"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      TypePattern();
      jj_consume_token(COLON);
      PointcutExpression();
    } else if (jj_2_17(2147483647) && (tokenIs("precedence"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      TypePatternList();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void PointcutExpression() throws ParseException {
    if (jj_2_18(2147483647)) {
      SimplePointcutExpression();
      jj_consume_token(SC_AND);
      PointcutExpression();
    } else if (jj_2_19(2147483647)) {
      SimplePointcutExpression();
      jj_consume_token(SC_OR);
      PointcutExpression();
    } else if (jj_2_20(1)) {
      SimplePointcutExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void SimplePointcutExpression() throws ParseException {
    if (jj_2_21(1)) {
      PrimitivePointcut();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        PointcutCall();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        PointcutExpression();
        jj_consume_token(RPAREN);
        break;
      case BANG:
        jj_consume_token(BANG);
        PointcutExpression();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void PointcutCall() throws ParseException {
    jj_consume_token(IDENTIFIER);
    Arguments();
  }

   public void AdviceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEFORE:
      jj_consume_token(BEFORE);
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        NameList();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      if (jj_2_22(2147483647)) {
        jj_consume_token(AFTER);
        FormalParameters();
        jj_consume_token(RETURNING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:
            FormalParameter();
            break;
          default:
            jj_la1[39] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          NameList();
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(AFTER);
        FormalParameters();
        jj_consume_token(THROWING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:
            FormalParameter();
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          NameList();
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AFTER:
          jj_consume_token(AFTER);
          FormalParameters();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THROWS:
            jj_consume_token(THROWS);
            NameList();
            break;
          default:
            jj_la1[45] = jj_gen;
            ;
          }
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case IDENTIFIER:
          ResultType();
          jj_consume_token(AROUND);
          FormalParameters();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THROWS:
            jj_consume_token(THROWS);
            NameList();
            break;
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

   public void AdviceDeclarationLookahead() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEFORE:
      jj_consume_token(BEFORE);
      break;
    case AFTER:
      jj_consume_token(AFTER);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      ResultType();
      jj_consume_token(AROUND);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** According to the reference sheet, AspectJ will only accept the strictfp
 * modifier before advice, but the ajc compiler will accept protected, etc.,
 * so they are supported here.
 */
   public void AdviceDeclaration() throws ParseException {
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    AdviceType();
    jj_consume_token(COLON);
    PointcutExpression();
    Block();
  }

// This production is to determine lookahead only.
   public void PointcutDeclarationLookahead() throws ParseException {
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(POINTCUT);
  }

   public void PointcutDeclaration() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(POINTCUT);
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      PointcutExpression();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   public void PrimitivePointcut() throws ParseException {
    if (jj_2_24(2147483647) && (tokenIs("call")
                        || tokenIs("execution")
                        || tokenIs("initialization")
                        || tokenIs("withincode"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      ConstructorPattern();
      jj_consume_token(RPAREN);
    } else if (jj_2_25(2147483647) && (tokenIs("call")
                        || tokenIs("execution")
                        || tokenIs("withincode"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      MethodPattern();
      jj_consume_token(RPAREN);
    } else if (jj_2_26(2147483647) && (tokenIs("staticinitialization")
                        || tokenIs("handler")
                        || tokenIs("within")
    
                        // TypePattern() might really be an identifier for the
                        // following 3 cases, can't distinguish yet
    
                        || tokenIs("this") // just a hack to make lookahead
                                           // work; not really necessary
                        || tokenIs("target")
                        || tokenIs("args"))) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        jj_consume_token(THIS);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      TypePatternList();
      jj_consume_token(RPAREN);
    } else if (jj_2_27(2147483647) && (tokenIs("get")
                        || tokenIs("set"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      FieldPattern();
      jj_consume_token(RPAREN);
    } else if (jj_2_28(2147483647) && (tokenIs("cflow")
                        || tokenIs("cflowbelow"))) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      PointcutExpression();
      jj_consume_token(RPAREN);
    } else if (tokenIs("if")) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void IdentifierPattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case IDENTIFIERPATTERN:
      jj_consume_token(IDENTIFIERPATTERN);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void FieldPattern() throws ParseException {
    if (jj_2_29(2)) {
      ModifiersPattern();
    } else {
      ;
    }
    TypePattern();
    if (jj_2_30(2147483647)) {
      TypePatternDot();
    } else {
      ;
    }
    IdentifierPattern();
  }

   public void MethodPattern() throws ParseException {
    if (jj_2_31(2)) {
      ModifiersPattern();
    } else {
      ;
    }
    TypePattern();
    if (jj_2_32(2147483647)) {
      TypePatternDot();
    } else {
      ;
    }
    IdentifierPattern();
    jj_consume_token(LPAREN);
    TypePatternList();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      ThrowsPattern();
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
  }

   public void ConstructorPattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case STRICTFP:
    case BANG:
      ModifiersPattern();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    if (jj_2_33(2147483647)) {
      TypePatternDot();
    } else {
      ;
    }
    jj_consume_token(NEW);
    jj_consume_token(LPAREN);
    TypePatternList();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      ThrowsPattern();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
  }

   public void ThrowsPattern() throws ParseException {
    TypePattern();
  }

//examples:
//  public void baz(..) );
//  !public void baz(..) );
//  public !static void baz(..) );
   public void ModifiersPattern() throws ParseException {
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_34(2)) {
        ;
      } else {
        break label_19;
      }
    }
  }

//examples:
// *baz*bar*..guug
//  Public pointcut test6(): call (  void *baz*bar*..guug*.bfd.as*.*(..) );
// *baz*bar*..*.guug*.bfd.as*.*(..)
   public void BasicTypePattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case IDENTIFIER:
    case IDENTIFIERPATTERN:
    case STAR:
      IdentifierPattern();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_21;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOTDOT:
        case DOT:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          break;
        case DOTDOT:
          jj_consume_token(DOTDOT);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        IdentifierPattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[72] = jj_gen;
            break label_23;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      }
      break;
    case BANG:
      jj_consume_token(BANG);
      TypePattern();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      TypePattern();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void TypePattern() throws ParseException {
    if (jj_2_35(2147483647)) {
      BasicTypePattern();
      jj_consume_token(SC_AND);
      TypePattern();
    } else if (jj_2_36(2147483647)) {
      BasicTypePattern();
      jj_consume_token(SC_OR);
      TypePattern();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
      case IDENTIFIERPATTERN:
      case LPAREN:
      case BANG:
      case STAR:
        BasicTypePattern();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void BasicTypePatternDot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            break label_24;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOT);
      break;
    case IDENTIFIER:
    case IDENTIFIERPATTERN:
    case STAR:
      label_25:
      while (true) {
        IdentifierPattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_26;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          break;
        case DOTDOT:
          jj_consume_token(DOTDOT);
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_37(2147483647)) {
          ;
        } else {
          break label_25;
        }
      }
      break;
    case BANG:
      jj_consume_token(BANG);
      TypePatternDot();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      TypePattern();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void TypePatternDot() throws ParseException {
    if (jj_2_38(2147483647)) {
      BasicTypePattern();
      jj_consume_token(SC_AND);
      TypePatternDot();
    } else if (jj_2_39(2147483647)) {
      BasicTypePattern();
      jj_consume_token(SC_OR);
      TypePatternDot();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
      case IDENTIFIERPATTERN:
      case LPAREN:
      case BANG:
      case STAR:
        BasicTypePatternDot();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void TypePatternList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case DOTDOT:
    case IDENTIFIER:
    case IDENTIFIERPATTERN:
    case LPAREN:
    case BANG:
    case STAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
      case IDENTIFIERPATTERN:
      case LPAREN:
      case BANG:
      case STAR:
        TypePattern();
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_27;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case IDENTIFIER:
        case IDENTIFIERPATTERN:
        case LPAREN:
        case BANG:
        case STAR:
          TypePattern();
          break;
        case DOTDOT:
          jj_consume_token(DOTDOT);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
  }

/* Following is unmodified from Java grammar */

/**************************************************/

/*
 * Declaration syntax follows.
 */
   public void ClassDeclaration() throws ParseException {
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedClassDeclaration();
  }

   public void UnmodifiedClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      Name();
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      NameList();
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    ClassBody();
  }

   public void ClassBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case STRICTFP:
      case POINTCUT:
      case PRIVILEGED:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_29;
      }
      ClassBodyDeclaration();
    }
    jj_consume_token(RBRACE);
  }

   public void NestedClassDeclaration() throws ParseException {
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedClassDeclaration();
  }

   public void ClassBodyDeclaration() throws ParseException {
    if (jj_2_40(2)) {
      Initializer();
    } else if (jj_2_41(2147483647)) {
      NestedClassDeclaration();
    } else if (jj_2_42(2147483647)) {
      NestedInterfaceDeclaration();
    } else if (jj_2_43(2147483647)) {
      NestedAspectDeclaration();
    } else if (jj_2_44(2147483647)) {
      ConstructorDeclaration();
    } else if (jj_2_45(2147483647)) {
      PointcutDeclaration();
    } else if (jj_2_46(2147483647)) {
      MethodDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// This production is to determine lookahead only.
   public void MethodDeclarationLookahead() throws ParseException {
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

   public void InterfaceDeclaration() throws ParseException {
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PUBLIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedInterfaceDeclaration();
  }

   public void NestedInterfaceDeclaration() throws ParseException {
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedInterfaceDeclaration();
  }

   public void UnmodifiedInterfaceDeclaration() throws ParseException {
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      NameList();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case STRICTFP:
      case PRIVILEGED:
      case IDENTIFIER:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_34;
      }
      InterfaceMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

/* Modified by Andrea Gini 2 
 * According to rules InterfaceBody and InterfaceBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */
   public void InterfaceMemberDeclaration() throws ParseException {
    if (jj_2_47(2147483647)) {
      NestedClassDeclaration();
    } else if (jj_2_48(2147483647)) {
      NestedInterfaceDeclaration();
    } else if (jj_2_49(2147483647)) {
      NestedAspectDeclaration();
    } else if (jj_2_50(2147483647)) {
      MethodDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void FieldDeclaration() throws ParseException {
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Type();
    VariableDeclarator();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

   public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
  }

   public void VariableDeclaratorId() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_37;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

   public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      label_38:
      while (true) {
        if (jj_2_51(2)) {
          ;
        } else {
          break label_38;
        }
        jj_consume_token(COMMA);
        VariableInitializer();
      }
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

   public void MethodDeclaration() throws ParseException {
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void MethodDeclarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_40;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

   public void FormalParameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[117] = jj_gen;
          break label_41;
        }
        jj_consume_token(COMMA);
        FormalParameter();
      }
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

   public void FormalParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    Type();
    VariableDeclaratorId();
  }

   public void FormalReturingThrowingParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
  }

   public void ConstructorDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_52(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 142:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_42;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

   public void ExplicitConstructorInvocation() throws ParseException {
    if (jj_2_54(2147483647)) {
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_53(2)) {
          PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        Arguments();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    Block();
  }

/*
 * Type, name and expression syntax follows.
 */
   public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      break;
    case IDENTIFIER:
      Name();
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_43;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

   public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_44:
    while (true) {
      if (jj_2_55(2)) {
        ;
      } else {
        break label_44;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
  }

   public void NameList() throws ParseException {
    Name();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

/*
 * Expression syntax follows.
 */
   public void Expression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      AssignmentOperator();
      Expression();
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
  }

   public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
      ConditionalExpression();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
  }

   public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_46;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpression();
    }
  }

   public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_47;
      }
      jj_consume_token(SC_AND);
      InclusiveOrExpression();
    }
  }

   public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_48;
      }
      jj_consume_token(BIT_OR);
      ExclusiveOrExpression();
    }
  }

   public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_49;
      }
      jj_consume_token(XOR);
      AndExpression();
    }
  }

   public void AndExpression() throws ParseException {
    EqualityExpression();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_50;
      }
      jj_consume_token(BIT_AND);
      EqualityExpression();
    }
  }

   public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[140] = jj_gen;
        break label_51;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    }
  }

   public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      Type();
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
  }

   public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_52;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }
  }

   public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[145] = jj_gen;
        break label_53;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

   public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_54;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[148] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

   public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[149] = jj_gen;
        break label_55;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

   public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

   public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

   public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      jj_la1[154] = jj_gen;
      if (jj_2_56(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case PROCEED:
        case THISJOINPOINT:
        case THISJOINPOINTSTATICPART:
        case THISENCLOSINGJOINPOINTSTATICPART:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_la1[155] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
   public void CastLookahead() throws ParseException {
    if (jj_2_57(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_58(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_la1[156] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
  }

   public void CastExpression() throws ParseException {
    if (jj_2_59(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(RPAREN);
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_56:
    while (true) {
      if (jj_2_60(2)) {
        ;
      } else {
        break label_56;
      }
      PrimarySuffix();
    }
  }

   public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case THISJOINPOINT:
      jj_consume_token(THISJOINPOINT);
      break;
    case THISJOINPOINTSTATICPART:
      jj_consume_token(THISJOINPOINTSTATICPART);
      break;
    case THISENCLOSINGJOINPOINTSTATICPART:
      jj_consume_token(THISENCLOSINGJOINPOINTSTATICPART);
      break;
    case PROCEED:
      jj_consume_token(PROCEED);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case NEW:
      AllocationExpression();
      break;
    default:
      jj_la1[161] = jj_gen;
      if (jj_2_61(2147483647)) {
        ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* Add "." "super" to be compatible with Java 1.2, 
 * Modified by Marco Savard
 */
   public void PrimarySuffix() throws ParseException {
    if (jj_2_62(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_63(2)) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    } else if (jj_2_64(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

   public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentList();
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

   public void ArgumentList() throws ParseException {
    Expression();
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[167] = jj_gen;
        break label_57;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

   public void AllocationExpression() throws ParseException {
    if (jj_2_65(2)) {
      jj_consume_token(NEW);
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassBody();
            break;
          default:
            jj_la1[168] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[169] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[170] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
   public void ArrayDimsAndInits() throws ParseException {
    if (jj_2_68(2)) {
      label_58:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        if (jj_2_66(2)) {
          ;
        } else {
          break label_58;
        }
      }
      label_59:
      while (true) {
        if (jj_2_67(2)) {
          ;
        } else {
          break label_59;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_60:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[171] = jj_gen;
            break label_60;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
   public void Statement() throws ParseException {
    if (jj_2_69(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      case 142:
        AssertStatement();
        break;
      default:
        jj_la1[173] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
  }

   public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 142:
        ;
        break;
      default:
        jj_la1[174] = jj_gen;
        break label_61;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

   public void BlockStatement() throws ParseException {
    if (jj_2_70(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 142:
        Statement();
        break;
      case CLASS:
        UnmodifiedClassDeclaration();
        break;
      case INTERFACE:
        UnmodifiedInterfaceDeclaration();
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void LocalVariableDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
    Type();
    VariableDeclarator();
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[177] = jj_gen;
        break label_62;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
  }

   public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

   public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_la1[178] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[179] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_63;
      }
      SwitchLabel();
      label_64:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case PROCEED:
        case THISJOINPOINT:
        case THISJOINPOINTSTATICPART:
        case THISENCLOSINGJOINPOINTSTATICPART:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case 142:
          ;
          break;
        default:
          jj_la1[182] = jj_gen;
          break label_64;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
  }

   public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

   public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
  }

   public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

   public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

   public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit();
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[186] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate();
      break;
    default:
      jj_la1[187] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    Statement();
  }

   public void ForInit() throws ParseException {
    if (jj_2_71(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case PROCEED:
      case THISJOINPOINT:
      case THISJOINPOINTSTATICPART:
      case THISENCLOSINGJOINPOINTSTATICPART:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_la1[188] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

   public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[189] = jj_gen;
        break label_65;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

   public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

   public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[190] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[191] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case PROCEED:
    case THISJOINPOINT:
    case THISJOINPOINTSTATICPART:
    case THISENCLOSINGJOINPOINTSTATICPART:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
  }

   public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

   public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    Block();
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[193] = jj_gen;
        break label_66;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      jj_la1[194] = jj_gen;
      ;
    }
  }

// added by Andrea Gini
   public void AssertStatement() throws ParseException {
    jj_consume_token(142);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      jj_la1[195] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

   private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

   private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

   private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

   private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

   private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

   private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

   private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

   private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

   private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

   private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

   private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

   private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

   private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

   private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

   private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

   private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

   private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

   private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

   private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

   private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

   private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

   private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

   private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

   private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

   private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

   private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

   private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

   private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

   private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

   private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

   private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

   private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

   private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

   private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

   private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

   private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

   private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

   private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

   private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

   private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

   private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

   private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

   private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

   private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

   private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

   private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

   private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

   private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

   private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

   private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

   private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

   private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

   private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

   private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

   private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

   private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

   private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

   private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

   private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

   private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

   private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

   private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

   private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

   private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

   private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

   private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

   private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

   private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

   private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

   private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

   private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

   private boolean jj_3_33() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_168() {
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_239() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_378()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

   private boolean jj_3R_134() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

   private boolean jj_3R_133() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3_32() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_238() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_209()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_132() {
    if (jj_3R_89()) return true;
    return false;
  }

   private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_237() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

   private boolean jj_3R_137() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

   private boolean jj_3_30() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_136() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_399() {
    if (jj_3R_187()) return true;
    return false;
  }

   private boolean jj_3R_236() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_209()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_31() {
    if (jj_3R_89()) return true;
    return false;
  }

   private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_139() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3_29() {
    if (jj_3R_89()) return true;
    return false;
  }

   private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

   private boolean jj_3R_414() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

   private boolean jj_3R_413() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

   private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) return true;
    }
    return false;
  }

   private boolean jj_3R_354() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_310()) return true;
    return false;
  }

   private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    return false;
  }

   private boolean jj_3_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_374() {
    if (jj_3R_398()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_130() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_235() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_374()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_129() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_412() {
    if (jj_3R_216()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_397() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_128() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_251() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_250() {
    if (jj_3R_258()) return true;
    return false;
  }

   private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_249() {
    if (jj_3R_257()) return true;
    return false;
  }

   private boolean jj_3R_406() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_404() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_3R_310()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_126() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_201() {
    if (jj_3R_211()) return true;
    return false;
  }

   private boolean jj_3R_200() {
    if (jj_3R_210()) return true;
    return false;
  }

   private boolean jj_3R_125() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = tokenIs("call")
                    || tokenIs("execution")
                    || tokenIs("initialization")
                    || tokenIs("withincode");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_125()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("call")
                    || tokenIs("execution")
                    || tokenIs("withincode");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_126()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("staticinitialization")
                    || tokenIs("handler")
                    || tokenIs("within")

                    // TypePattern() might really be an identifier for the
                    // following 3 cases, can't distinguish yet

                    || tokenIs("this") // just a hack to make lookahead
                                       // work; not really necessary
                    || tokenIs("target")
                    || tokenIs("args");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_127()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("get")
                    || tokenIs("set");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_128()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("cflow")
                    || tokenIs("cflowbelow");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_129()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("if");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_130()) return true;
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_199() {
    if (jj_3R_209()) return true;
    return false;
  }

   private boolean jj_3R_419() {
    if (jj_3R_166()) return true;
    return false;
  }

   private boolean jj_3R_163() {
    if (jj_3R_187()) return true;
    return false;
  }

   private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_198() {
    if (jj_3R_208()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_418() {
    if (jj_3R_166()) return true;
    return false;
  }

   private boolean jj_3R_408() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_405() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_304() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

   private boolean jj_3R_403() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_418()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_112() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_287() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(POINTCUT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_83()) return true;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_110() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

   private boolean jj_3R_407() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_231() {
    if (jj_3R_246()) return true;
    return false;
  }

   private boolean jj_3R_116() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(AROUND)) return true;
    return false;
  }

   private boolean jj_3R_73() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(POINTCUT)) return true;
    return false;
  }

   private boolean jj_3R_402() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_230() {
    if (jj_3R_245()) return true;
    return false;
  }

   private boolean jj_3_67() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_229() {
    if (jj_3R_244()) return true;
    return false;
  }

   private boolean jj_3R_228() {
    if (jj_3R_243()) return true;
    return false;
  }

   private boolean jj_3R_360() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_227() {
    if (jj_3R_242()) return true;
    return false;
  }

   private boolean jj_3R_355() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_361()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_226() {
    if (jj_3R_241()) return true;
    return false;
  }

   private boolean jj_3R_225() {
    if (jj_3R_240()) return true;
    return false;
  }

   private boolean jj_3R_224() {
    if (jj_3R_239()) return true;
    return false;
  }

   private boolean jj_3R_223() {
    if (jj_3R_238()) return true;
    return false;
  }

   private boolean jj_3R_421() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_222() {
    if (jj_3R_237()) return true;
    return false;
  }

   private boolean jj_3_23() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(THROWING)) return true;
    return false;
  }

   private boolean jj_3R_77() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_221() {
    if (jj_3R_236()) return true;
    return false;
  }

   private boolean jj_3_22() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RETURNING)) return true;
    return false;
  }

   private boolean jj_3R_220() {
    if (jj_3R_235()) return true;
    return false;
  }

   private boolean jj_3R_219() {
    if (jj_3R_234()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_388() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(AROUND)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_387() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_218() {
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_386() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(THROWING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_385() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RETURNING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_69() {
    if (jj_3R_110()) return true;
    return false;
  }

   private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_384() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_420() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_411() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) return true;
    }
    return false;
  }

   private boolean jj_3R_260() {
    if (jj_3R_264()) return true;
    return false;
  }

   private boolean jj_3R_165() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

   private boolean jj_3R_390() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_389() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_263() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_259() {
    Token xsp;
    if (jj_3R_263()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_177()) return true;
    return false;
  }

   private boolean jj_3_66() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_124() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

   private boolean jj_3_19() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

   private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

   private boolean jj_3R_123() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3_18() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

   private boolean jj_3_68() {
    Token xsp;
    if (jj_3_66()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_122() {
    if (jj_3R_165()) return true;
    return false;
  }

   private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3_21() {
    if (jj_3R_82()) return true;
    return false;
  }

   private boolean jj_3R_254() {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3_20() {
    if (jj_3R_81()) return true;
    return false;
  }

   private boolean jj_3R_253() {
    if (jj_3R_252()) return true;
    return false;
  }

   private boolean jj_3R_141() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

   private boolean jj_3R_196() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

   private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_140() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

   private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_158() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    return false;
  }

   private boolean jj_3_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_396() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

   private boolean jj_3R_368() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_364() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

   private boolean jj_3_65() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_105()) return true;
    if (jj_3R_252()) return true;
    return false;
  }

   private boolean jj_3R_395() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

   private boolean jj_3R_410() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_394() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_151() {
    if (jj_3R_184()) return true;
    return false;
  }

   private boolean jj_3R_184() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_393() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = tokenIs("parents");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_393()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("warning") || tokenIs("error");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_394()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("soft");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_395()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = tokenIs("precedence");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_396()) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_103() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_359() {
    if (jj_scan_token(DECLARE)) return true;
    if (jj_3R_373()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_363() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

   private boolean jj_3R_367() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_390()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_365() {
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_362() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_205() {
    if (jj_3R_214()) return true;
    return false;
  }

   private boolean jj_3R_185() {
    if (jj_3R_195()) return true;
    return false;
  }

   private boolean jj_3R_356() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_363()) return true;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

   private boolean jj_3R_369() {
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_392() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

   private boolean jj_3R_366() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_372() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_371()) return true;
    return false;
  }

   private boolean jj_3R_357() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_366()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    if (jj_3R_367()) return true;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

   private boolean jj_3R_156() {
    if (jj_3R_103()) return true;
    return false;
  }

   private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_155() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_78() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_80()) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

   private boolean jj_3R_154() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3_13() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3_64() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

   private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_63() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

   private boolean jj_3R_79() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

   private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_62() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

   private boolean jj_3_61() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_409() {
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_410()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_183() {
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_371() {
    if (jj_3R_391()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_60() {
    if (jj_3R_106()) return true;
    return false;
  }

   private boolean jj_3R_182() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_181() {
    if (jj_3R_108()) return true;
    return false;
  }

   private boolean jj_3R_180() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_370() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_179() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_358() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_370()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_111()) return true;
    if (jj_3R_371()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_372()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3_12() {
    if (jj_3R_79()) return true;
    return false;
  }

   private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    }
    return false;
  }

   private boolean jj_3_11() {
    if (jj_3R_78()) return true;
    return false;
  }

   private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_178() {
    if (jj_3R_195()) return true;
    return false;
  }

   private boolean jj_3R_353() {
    if (jj_3R_359()) return true;
    return false;
  }

   private boolean jj_3_10() {
    if (jj_3R_77()) return true;
    return false;
  }

   private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_352() {
    if (jj_3R_358()) return true;
    return false;
  }

   private boolean jj_3_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

   private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

   private boolean jj_3R_102() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_351() {
    if (jj_3R_357()) return true;
    return false;
  }

   private boolean jj_3_8() {
    if (jj_3R_74()) return true;
    return false;
  }

   private boolean jj_3R_350() {
    if (jj_3R_356()) return true;
    return false;
  }

   private boolean jj_3R_342() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_313()) return true;
    return false;
  }

   private boolean jj_3_7() {
    if (jj_3R_73()) return true;
    return false;
  }

   private boolean jj_3R_349() {
    if (jj_3R_355()) return true;
    return false;
  }

   private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_341() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_282()) return true;
    return false;
  }

   private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    return false;
  }

   private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(ASPECT)) return true;
    return false;
  }

   private boolean jj_3R_348() {
    if (jj_3R_286()) return true;
    return false;
  }

   private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_347() {
    if (jj_3R_288()) return true;
    return false;
  }

   private boolean jj_3_58() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_334() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

   private boolean jj_3R_346() {
    if (jj_3R_287()) return true;
    return false;
  }

   private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_4() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_345() {
    if (jj_3R_285()) return true;
    return false;
  }

   private boolean jj_3R_153() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_152() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_344() {
    if (jj_3R_284()) return true;
    return false;
  }

   private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    return false;
  }

   private boolean jj_3_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

   private boolean jj_3_56() {
    if (jj_3R_104()) return true;
    return false;
  }

   private boolean jj_3R_343() {
    if (jj_3R_283()) return true;
    return false;
  }

   private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_3() {
    if (jj_3R_69()) return true;
    return false;
  }

   private boolean jj_3R_329() {
    if (jj_3R_334()) return true;
    return false;
  }

   private boolean jj_3R_328() {
    if (jj_3R_333()) return true;
    return false;
  }

   private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    if (jj_3R_282()) return true;
    return false;
  }

   private boolean jj_3R_313() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_331() {
    if (jj_3R_340()) return true;
    return false;
  }

   private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_298()) return true;
    return false;
  }

   private boolean jj_3R_258() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

   private boolean jj_3R_312() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) return true;
    }
    if (jj_3R_273()) return true;
    return false;
  }

   private boolean jj_3R_322() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) return true;
    }
    }
    if (jj_3R_282()) return true;
    return false;
  }

   private boolean jj_3R_321() {
    if (jj_scan_token(PERCFLOW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_320() {
    if (jj_scan_token(DOMINATES)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_319() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_257() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

   private boolean jj_3R_318() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_294() {
    if (jj_3R_313()) return true;
    return false;
  }

   private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    }
    if (jj_3R_270()) return true;
    return false;
  }

   private boolean jj_3R_298() {
    if (jj_scan_token(ASPECT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    return false;
  }

   private boolean jj_3R_293() {
    if (jj_3R_258()) return true;
    return false;
  }

   private boolean jj_3R_292() {
    if (jj_3R_257()) return true;
    return false;
  }

   private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) return true;
    }
    if (jj_3R_282()) return true;
    return false;
  }

   private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    }
    }
    if (jj_3R_266()) return true;
    return false;
  }

   private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASPECT)) return true;
    return false;
  }

   private boolean jj_3R_272() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

   private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_273() {
    if (jj_3R_282()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) return true;
    }
    if (jj_3R_256()) return true;
    return false;
  }

   private boolean jj_3R_270() {
    if (jj_3R_273()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_266() {
    if (jj_3R_270()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_265() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

   private boolean jj_3R_262() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_255() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_217()) return true;
    return false;
  }

   private boolean jj_3R_261() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

   private boolean jj_3R_256() {
    if (jj_3R_262()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_247() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

   private boolean jj_3R_248() {
    if (jj_3R_256()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_232() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

   private boolean jj_3R_233() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_215() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

   private boolean jj_3R_217() {
    if (jj_3R_233()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_207() {
    if (jj_3R_217()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_197() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_186() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_159() {
    if (jj_3R_186()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_206() {
    if (jj_3R_216()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_109() {
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_332() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_323() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3_55() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_162() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_157() {
    if (jj_3R_111()) return true;
    return false;
  }

   private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

   private boolean jj_3R_161() {
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_300() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_160() {
    if (jj_3R_105()) return true;
    return false;
  }

   private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3_54() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3_52() {
    if (jj_3R_101()) return true;
    return false;
  }

   private boolean jj_3_53() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

   private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

   private boolean jj_3R_148() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_324() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_302() {
    if (jj_3R_187()) return true;
    return false;
  }

   private boolean jj_3R_301() {
    if (jj_3R_101()) return true;
    return false;
  }

   private boolean jj_3R_167() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

   private boolean jj_3R_307() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3R_299() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_83()) return true;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

   private boolean jj_3R_131() {
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_3R_192()) return true;
    return false;
  }

   private boolean jj_3R_83() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_306() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_308() {
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_305() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_288() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    if (jj_3R_306()) return true;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

   private boolean jj_3R_267() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_325() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

   private boolean jj_3R_311() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_310()) return true;
    return false;
  }

   private boolean jj_3R_204() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_177() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3R_147() {
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

   private boolean jj_3R_146() {
    if (jj_3R_177()) return true;
    return false;
  }

   private boolean jj_3R_192() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_310() {
    if (jj_3R_192()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_309() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_289() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_111()) return true;
    if (jj_3R_310()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3_50() {
    if (jj_3R_74()) return true;
    return false;
  }

   private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3_49() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(ASPECT)) return true;
    return false;
  }

   private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_316() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3_48() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

   private boolean jj_3R_339() {
    if (jj_3R_289()) return true;
    return false;
  }

   private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_47() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_338() {
    if (jj_3R_288()) return true;
    return false;
  }

   private boolean jj_3R_337() {
    if (jj_3R_285()) return true;
    return false;
  }

   private boolean jj_3R_336() {
    if (jj_3R_284()) return true;
    return false;
  }

   private boolean jj_3R_335() {
    if (jj_3R_283()) return true;
    return false;
  }

   private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_317() {
    if (jj_3R_330()) return true;
    return false;
  }

   private boolean jj_3R_211() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_284() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_211()) return true;
    return false;
  }

   private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_74() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

   private boolean jj_3_46() {
    if (jj_3R_74()) return true;
    return false;
  }

   private boolean jj_3_45() {
    if (jj_3R_73()) return true;
    return false;
  }

   private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

   private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

   private boolean jj_3R_280() {
    if (jj_3R_289()) return true;
    return false;
  }

   private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_315() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

   private boolean jj_3_43() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(ASPECT)) return true;
    return false;
  }

   private boolean jj_3R_279() {
    if (jj_3R_288()) return true;
    return false;
  }

   private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_278() {
    if (jj_3R_287()) return true;
    return false;
  }

   private boolean jj_3_42() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

   private boolean jj_3R_277() {
    if (jj_3R_286()) return true;
    return false;
  }

   private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_41() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

   private boolean jj_3R_276() {
    if (jj_3R_285()) return true;
    return false;
  }

   private boolean jj_3R_275() {
    if (jj_3R_284()) return true;
    return false;
  }

   private boolean jj_3R_274() {
    if (jj_3R_283()) return true;
    return false;
  }

   private boolean jj_3R_314() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

   private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3_40() {
    if (jj_3R_69()) return true;
    return false;
  }

   private boolean jj_3R_194() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_382() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_283() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_210()) return true;
    return false;
  }

   private boolean jj_3R_268() {
    if (jj_3R_271()) return true;
    return false;
  }

   private boolean jj_3R_193() {
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_173() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

   private boolean jj_3R_264() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

   private boolean jj_3R_213() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_92() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_210() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    return false;
  }

   private boolean jj_3R_246() {
    if (jj_scan_token(142)) return true;
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_175() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_381() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_172() {
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_380() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_166()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3_39() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

   private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3_38() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

   private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3R_212() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_245() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_380()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    return false;
  }

   private boolean jj_3_37() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

   private boolean jj_3R_121() {
    if (jj_3R_164()) return true;
    return false;
  }

   private boolean jj_3R_120() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_119() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_378() {
    if (jj_3R_401()) return true;
    return false;
  }

   private boolean jj_3R_244() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

   private boolean jj_3R_379() {
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_191() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

   private boolean jj_3_36() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

   private boolean jj_3R_190() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

   private boolean jj_3R_203() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

   private boolean jj_3_35() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

   private boolean jj_3R_243() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_189() {
    Token xsp;
    if (jj_3R_203()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_202() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    }
    return false;
  }

   private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

   private boolean jj_3R_174() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

   private boolean jj_3R_422() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

   private boolean jj_3R_242() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_171() {
    if (jj_3R_90()) return true;
    return false;
  }

   private boolean jj_3R_170() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    return false;
  }

   private boolean jj_3R_169() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_241() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_377() {
    if (jj_3R_109()) return true;
    return false;
  }

   private boolean jj_3R_145() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

   private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_91()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_144() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

   private boolean jj_3R_240() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

   private boolean jj_3R_143() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_142() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_174()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_375() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

   private boolean jj_3R_401() {
    if (jj_3R_417()) return true;
    return false;
  }

   private boolean jj_3_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

   private boolean jj_3R_417() {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_422()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_376() {
    if (jj_3R_400()) return true;
    return false;
  }

   private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

   private boolean jj_3R_89() {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

   private boolean jj_3R_416() {
    if (jj_3R_417()) return true;
    return false;
  }

   private boolean jj_3R_415() {
    if (jj_3R_208()) return true;
    return false;
  }

   private boolean jj_3R_400() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_415()) {
    jj_scanpos = xsp;
    if (jj_3R_416()) return true;
    }
    return false;
  }

  public AspectJParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
   private int[] jj_la1 = new int[196];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20102000,0x0,0x2000,0x20002000,0x20002000,0x8000000,0x0,0x0,0x0,0xa2196000,0x0,0x0,0x0,0xa2094000,0x20000000,0x20000000,0x0,0x0,0x0,0x20002000,0x20002000,0x20002000,0x20002000,0x20002000,0x20002000,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0xa2094000,0x0,0x0,0xa2094000,0x0,0x0,0x0,0x0,0x0,0x82094000,0x20000000,0x20000000,0x82094000,0x20000000,0x20000000,0x20002000,0x20002000,0x20002000,0x20002000,0x0,0x0,0x0,0x0,0x20002000,0x0,0x0,0x20002000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x82094000,0x82094000,0x0,0x82094000,0x0,0x0,0x0,0x0,0x82094000,0x82094000,0x82094000,0x0,0x82094000,0x82094000,0x20002000,0x20002000,0x8000000,0x0,0xa2196000,0x20002000,0x20002000,0xa2094000,0x20002000,0x20002000,0x2000,0x2000,0x20002000,0x20002000,0x8000000,0xa2196000,0xa2094000,0x20000000,0x20000000,0x0,0x0,0x0,0x92094000,0x92094000,0x0,0x20002000,0x20002000,0x0,0x0,0x0,0x0,0xa2094000,0x20000000,0xa2094000,0x0,0x0,0x0,0xb359c000,0x92094000,0x0,0x82094000,0x0,0x82094000,0x82094000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x92094000,0x0,0x0,0x92094000,0x10000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x10000000,0x92094000,0x0,0x0,0x0,0x0,0x0,0x0,0x9349c000,0xb359c000,0x9359c000,0x20000000,0x0,0x0,0x0,0x92094000,0x820000,0xb359c000,0x820000,0x4000000,0xb2094000,0x92094000,0x92094000,0x92094000,0x0,0x0,0x0,0x92094000,0x40000,0x40000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1000,0x10,0x80008080,0x0,0x80008080,0x80008000,0x80008000,0x0,0x8,0x0,0x0,0xb226e3c0,0x0,0x8000e000,0x8000e000,0x2206e140,0x2204e000,0x2204e000,0x0,0x0,0x0,0x8024e200,0x8024e200,0x8024e200,0x8024e200,0x8024e200,0x8024e200,0x1000000,0x0,0x8020e200,0x8020e200,0x1000000,0x0,0x0,0x0,0x8,0x8,0x0,0x1000000,0x20140,0x0,0x1000000,0x20140,0x0,0x1000000,0x1000000,0x1000000,0x0,0x10020140,0x8024e000,0x8024e000,0x10020140,0x8024e000,0x8024e000,0xe000,0xe000,0xe000,0xe000,0x0,0x400000,0x0,0x1000000,0x8024e200,0x1000000,0x0,0x8024e200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10020140,0x10020140,0x0,0x10020140,0x0,0x0,0x0,0x0,0x10020140,0x10020140,0x10020140,0x0,0x10020140,0x10020140,0x80008000,0x80008000,0x0,0x8,0xb226e3c0,0x8004e000,0x8004e000,0x2206e140,0x8024e200,0x8024e200,0x80008000,0x80008000,0x8004e000,0x8004e000,0x0,0xb226e3c0,0x2206e140,0x2204e000,0x2204e000,0x0,0x0,0x0,0x144a0d40,0x144a0d40,0x0,0x8024e200,0x8024e200,0x1000000,0x0,0x0,0x0,0x20140,0x0,0x20140,0xe000,0xe000,0x1000000,0x5cfb0dc5,0x144a0d40,0x40000,0x20140,0x0,0x20140,0x10020140,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x144a0d40,0x0,0x0,0x144a0d40,0x4480c00,0x0,0x0,0x0,0x0,0x4480c00,0x0,0x0,0x4000800,0x4000000,0x144a0d40,0x0,0x0,0x0,0x400,0x0,0x0,0x5cfb0d45,0x5cfb0dc5,0x5cfb0dc5,0x0,0x0,0x0,0x0,0x144a0d40,0x0,0x5cfb0dc5,0x0,0x0,0x144a0d40,0x144a0d40,0x144a0d40,0x144a0d40,0x0,0x0,0x0,0x144a0d40,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1004,0x0,0x0,0x1000,0x1000,0x0,0x0,0x20,0x80,0x30001819,0x1000,0x0,0x0,0x10000010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x8,0x10000001,0x0,0x0,0x10000009,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x30000000,0x30000000,0x0,0x0,0x0,0x0,0x80000,0x80000,0x30000000,0x30000000,0x30080000,0x0,0x30080000,0x30080000,0x0,0x0,0x0,0x0,0x10001800,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10001000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x1d13a000,0x1d13a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x1d13a000,0x1d13a000,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d13a000,0x0,0x0,0x1d13a000,0x1d100000,0x0,0x0,0x0,0x0,0xd13a000,0x10000000,0x0,0xd100000,0x0,0x1d13a000,0x0,0x0,0x0,0x0,0x0,0x0,0x1d13a000,0x1d13a000,0x1d13a000,0x0,0x0,0x0,0x0,0x1d13a000,0x0,0x1d13a000,0x0,0x0,0x1d13a000,0x1d13a000,0x1d13a000,0x1d13a000,0x0,0x10000000,0x10000000,0x1d13a000,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x40,0x100,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x4001045,0x0,0x0,0x0,0x40,0x0,0x0,0x80,0x200,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x0,0x0,0x0,0x44,0x10,0x10,0x0,0x0,0x1001,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x4000000,0x0,0x1000,0x0,0x1000,0x0,0x10,0x1000000,0x10,0x100,0x100,0x1000000,0x10,0x4001001,0x4001001,0x10,0x0,0x1000000,0x10,0x100,0x100,0x4001001,0x4001001,0x4001001,0x80,0x4001001,0x4001001,0x0,0x0,0x0,0x0,0x44,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x80,0x200,0x10,0x3c03005,0x3c03005,0x80,0x0,0x0,0x0,0x44,0x10,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xc00045,0x1,0x0,0x0,0x10,0x0,0x0,0x80,0x200,0x200,0x4000,0x100000,0x200000,0x20000000,0x40000000,0x10000000,0x90000,0x90000,0x0,0x60c00,0x60c00,0x0,0x0,0x3000000,0x3000000,0x8c000000,0x8c000000,0x3000000,0x3c03001,0x3000,0x3000,0x1,0x3001,0x1,0xc00000,0xc00000,0x1,0x1,0x0,0x111,0x0,0x0,0x3c03001,0x80,0x4,0x11,0x0,0x10,0x10,0xc00045,0xc00045,0xc00045,0x0,0x80,0xc00200,0xc00200,0xc00001,0x0,0xc00045,0x0,0x0,0xc00001,0x3c03001,0xc00001,0xc00001,0x80,0x0,0x0,0x3c03001,0x0,0x0,0x8000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff8,0x3ff8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x4000,0x0,0x0,0x3ff8,0x3ff8,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private JJCalls[] jj_2_rtns = new JJCalls[71];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AspectJParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public AspectJParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AspectJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AspectJParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AspectJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AspectJParser(AspectJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AspectJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 196; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

   private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private  class LookaheadSuccess extends java.lang.Error { }
   private LookaheadSuccess jj_ls = new LookaheadSuccess();
   private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

   public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

   public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

   private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[143];
    for (int i = 0; i < 143; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 196; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 143; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

   public void enable_tracing() {
  }

   public void disable_tracing() {
  }

   private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 71; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

   private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static  class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
