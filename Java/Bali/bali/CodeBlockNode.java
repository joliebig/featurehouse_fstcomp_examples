

import Jakarta.util.Util;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.LogRecord;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

//=======================================================================//
// TABLE OF CONTENTS:
//
//      I.  Hand-written code
//	    A.  AstNode sub-classes
//          B.  Logging classes and instances
//          C.  Main class
//          D.  Parser class
//
//     II.  Generated code (generated by GenCT)
//          A.  Syntax tree nodes
//          B.  Kernel class derivations
//=======================================================================//

//-----------------------------------------------------------------------//
// AstNode sub-classes:
//-----------------------------------------------------------------------//

/**
 * Specialized <code>AstNode</code> implementing the return type of
 * JAVACODE blocks in file "bali.b".  This type of <code>AstNode</code>
 * is normally generated by Bali automatically, but that's not possible
 * for JAVACODE blocks.  So, this code was converted from another class
 * that <em>was</em> generated by Bali.
 *
 * @layer<bali>
 */
    
public class CodeBlockNode extends  AstNode {
        
    boolean order[] = { true };
    static private int first_subclass = 0;
    static private int class_code = 0;

    public  CodeBlockNode setParms( AstTokenInterface _arg0 ) {
        arg = new  AstNode[1];
        tok = new  AstTokenInterface[1];
        tok[0] = _arg0;
        ;
        InitChildren();
        return ( ( CodeBlockNode ) this );
    }

    public boolean[] printorder() {
        return ( order );
    }
    public boolean SyntaxCheck() {
        return ( true );
    }
    public int firstSubclass() {
        return ( first_subclass );
    }
    public int classCode() {
        return ( class_code );
    }
}
