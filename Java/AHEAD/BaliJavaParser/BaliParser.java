/* Generated By:JavaCC: Do not edit this line. BaliParser.java */

public class BaliParser implements BaliParserConstants {

    private static AST_Program parseRoot = null ;

    public static AST_Program getStartRoot () {
        return parseRoot ;
    }

    public static AST_Program getStartRoot (BaliParser parser)
    throws ParseException {
        try {
            parseRoot = parser.AST_Program () ;
            parser.requireEOF () ;
            return parseRoot ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException
            ("token error occurred") ;
            e.initCause (error) ;
            throw e ;
        }
    }

    // Wraps an optional node around an AstNode:
    //
    static AstOptNode opt (AstNode node) {
        return new AstOptNode () . setParms (node) ;
    }

    // Wraps an optional node around an AstToken:
    //
    static AstOptToken opt (AstToken token) {
        return new AstOptToken () . setParms (token) ;
    }

    // Forces an end-of-file check in the tokenStream:
    //
    public void requireEOF () throws ParseException {
        try {
            jj_consume_token (BaliParserConstants.EOF) ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException ("EOF error") ;
            e.initCause (error) ;
            throw e ;
        }
    }

    // Converts a JavaCC Token to a Bali AstToken:
    //
    static AstToken t2at (Token tok) {

        // Special case -- if token is optional:
        //
        if (tok == null)
            return (null) ;

        StringBuffer buffer = new StringBuffer () ;
        Token special = tok.specialToken;
        while (special != null) {
            buffer.insert (0, special.toString()) ;
            special = special.specialToken ;
        }
        String white = buffer.toString () ;

        return new AstToken().setParms (white, tok.image, tok.endLine) ;
    }

//-----------------------------------//
// JAVACODE blocks from grammar:
//-----------------------------------//

// No JAVACODE blocks in Bali grammar.

//-----------------------------------//
// Productions from Bali grammar:
//-----------------------------------//
  final public AST_Program AST_Program() throws ParseException {
    AST_Class asSs0=null ;
    AST_Imports as0=null ;
    PackageDeclaration pa0=null ;
    switch (jj_nt.kind) {
    case PACKAGE:
    case LAYER:
      pa0 = PackageDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IMPORT:
    case IMP_ESCAPE:
      as0 = AST_Imports();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case STATE_MACHINE:
    case ABSTRACT:
    case CLASS:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case SEMICOLON:
    case CLS_ESCAPE:
    case MOD_ESCAPE:
    case OVERRIDES:
    case REFINES:
    case SOURCE:
    case 203:
    case IDENTIFIER:
      asSs0 = AST_Class();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return new program().setParms (opt(pa0), opt(as0), opt(asSs0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public AEBody AEBody() throws ParseException {
    EqualityExpression eq0=null ;
    Token to0=null ;
    to0 = jj_consume_token(BIT_AND);
    eq0 = EqualityExpression();
     {if (true) return new AEBod().setParms (t2at(to0), eq0) ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_ArgList AST_ArgList() throws ParseException {
    AST_ArgList list = new AST_ArgList () ;
    Expression ex0=null ;
    Token to0=null ;
    ex0 = Expression();
     list.add (new AST_ArgListElem().setParms (ex0)) ;
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      to0 = jj_consume_token(COMMA);
      ex0 = Expression();
         list.add (new AST_ArgListElem().setParms (t2at(to0), ex0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_ArrayInit AST_ArrayInit() throws ParseException {
    AST_Exp as0=null ;
    ArrayInitializer ar0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case AI_ESCAPE:
      to0 = jj_consume_token(AI_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new AiEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VI_ESCAPE:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case 201:
    case IDENTIFIER:
      ar0 = ArrayInitializer();
     {if (true) return new ArrayInit().setParms (ar0) ;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AST_Catches AST_Catches() throws ParseException {
    AST_Catches list = new AST_Catches () ;
    Catch ca0=null ;
    label_2:
    while (true) {
      ca0 = Catch();
         list.add (new AST_CatchesElem().setParms (ca0)) ;
      switch (jj_nt.kind) {
      case CATCH:
      case CAT_ESCAPE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_Class AST_Class() throws ParseException {
    AST_Class list = new AST_Class () ;
    TypeDeclaration ty0=null ;
    label_3:
    while (true) {
      ty0 = TypeDeclaration();
         list.add (new AST_ClassElem().setParms (ty0)) ;
      switch (jj_nt.kind) {
      case STATE_MACHINE:
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case CLS_ESCAPE:
      case MOD_ESCAPE:
      case OVERRIDES:
      case REFINES:
      case SOURCE:
      case 203:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_Exp AST_Exp() throws ParseException {
    Expression ex0=null ;
    ex0 = Expression();
     {if (true) return (AST_Exp) ex0 ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_ExpStmt AST_ExpStmt() throws ParseException {
    AST_ExpStmt list = new AST_ExpStmt () ;
    StatementExpression st0=null ;
    Token to0=null ;
    st0 = StatementExpression();
     list.add (new AST_ExpStmtElem().setParms (st0)) ;
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      to0 = jj_consume_token(COMMA);
      st0 = StatementExpression();
         list.add (new AST_ExpStmtElem().setParms (t2at(to0), st0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_FieldDecl AST_FieldDecl() throws ParseException {
    AST_FieldDecl list = new AST_FieldDecl () ;
    ClassBodyDeclaration cl0=null ;
    label_5:
    while (true) {
      cl0 = ClassBodyDeclaration();
         list.add (new AST_FieldDeclElem().setParms (cl0)) ;
      switch (jj_nt.kind) {
      case STATE_MACHINE:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case MOD_ESCAPE:
      case MTH_ESCAPE:
      case TYP_ESCAPE:
      case ENVIRONMENT:
      case OVERRIDES:
      case REFINES:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_Imports AST_Imports() throws ParseException {
    AST_Imports list = new AST_Imports () ;
    ImportDeclaration im0=null ;
    label_6:
    while (true) {
      im0 = ImportDeclaration();
         list.add (new AST_ImportsElem().setParms (im0)) ;
      switch (jj_nt.kind) {
      case IMPORT:
      case IMP_ESCAPE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_Modifiers AST_Modifiers() throws ParseException {
    AST_Modifiers list = new AST_Modifiers () ;
    Modifier mo0=null ;
    label_7:
    while (true) {
      mo0 = Modifier();
         list.add (new AST_ModifiersElem().setParms (mo0)) ;
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case MOD_ESCAPE:
      case OVERRIDES:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_ParList AST_ParList() throws ParseException {
    AST_ParList list = new AST_ParList () ;
    FormalParameter fo0=null ;
    Token to0=null ;
    fo0 = FormalParameter();
     list.add (new AST_ParListElem().setParms (fo0)) ;
    label_8:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      to0 = jj_consume_token(COMMA);
      fo0 = FormalParameter();
         list.add (new AST_ParListElem().setParms (t2at(to0), fo0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_QualifiedName AST_QualifiedName() throws ParseException {
    AST_QualifiedName list = new AST_QualifiedName () ;
    QName qn0=null ;
    Token to0=null ;
    qn0 = QName();
     list.add (new AST_QualifiedNameElem().setParms (qn0)) ;
    label_9:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_9;
      }
      to0 = jj_consume_token(DOT);
      qn0 = QName();
         list.add (new AST_QualifiedNameElem().setParms (t2at(to0), qn0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_Stmt AST_Stmt() throws ParseException {
    AST_Stmt list = new AST_Stmt () ;
    BlockStatement bl0=null ;
    label_10:
    while (true) {
      bl0 = BlockStatement();
         list.add (new AST_StmtElem().setParms (bl0)) ;
      switch (jj_nt.kind) {
      case GOTO_STATE:
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STM_ESCAPE:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case ALIAS:
      case ENVIRONMENT:
      case 201:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_SwitchEntry AST_SwitchEntry() throws ParseException {
    AST_SwitchEntry list = new AST_SwitchEntry () ;
    SwitchEntryBody sw0=null ;
    label_11:
    while (true) {
      sw0 = SwitchEntryBody();
         list.add (new AST_SwitchEntryElem().setParms (sw0)) ;
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
      case CASE_ESCAPE:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_TypeName AST_TypeName() throws ParseException {
    AST_Exp as0=null ;
    AST_QualifiedName asSs0=null ;
    Dims di0=null ;
    PrimitiveType pr0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case TYP_ESCAPE:
      to0 = jj_consume_token(TYP_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new TypEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      pr0 = PrimitiveType();
      if (jj_2_2(2)) {
        di0 = Dims();
      } else {
        ;
      }
     {if (true) return new PrimType().setParms (pr0, opt(di0)) ;}
      break;
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IDENTIFIER:
      asSs0 = AST_QualifiedName();
      if (jj_2_3(2)) {
        di0 = Dims();
      } else {
        ;
      }
     {if (true) return new QNameType().setParms (asSs0, opt(di0)) ;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AST_TypeNameList AST_TypeNameList() throws ParseException {
    AST_TypeNameList list = new AST_TypeNameList () ;
    TName tn0=null ;
    Token to0=null ;
    tn0 = TName();
     list.add (new AST_TypeNameListElem().setParms (tn0)) ;
    label_12:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_12;
      }
      to0 = jj_consume_token(COMMA);
      tn0 = TName();
         list.add (new AST_TypeNameListElem().setParms (t2at(to0), tn0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_VarDecl AST_VarDecl() throws ParseException {
    AST_VarDecl list = new AST_VarDecl () ;
    Token to0=null ;
    VariableDeclarator va0=null ;
    va0 = VariableDeclarator();
     list.add (new AST_VarDeclElem().setParms (va0)) ;
    label_13:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_13;
      }
      to0 = jj_consume_token(COMMA);
      va0 = VariableDeclarator();
         list.add (new AST_VarDeclElem().setParms (t2at(to0), va0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AST_VarInit AST_VarInit() throws ParseException {
    AST_ArrayInit asSs0=null ;
    AST_Exp as0=null ;
    Expression ex0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case VI_ESCAPE:
      to0 = jj_consume_token(VI_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new ViEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case LBRACE:
      to0 = jj_consume_token(LBRACE);
      switch (jj_nt.kind) {
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case AI_ESCAPE:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VI_ESCAPE:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case 201:
      case IDENTIFIER:
        asSs0 = AST_ArrayInit();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case COMMA:
        to1 = jj_consume_token(COMMA);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      to2 = jj_consume_token(RBRACE);
     {if (true) return new ArrInit().setParms
    (t2at(to0), opt(asSs0), opt(t2at(to1)), t2at(to2)) ;}
      break;
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case 201:
    case IDENTIFIER:
      ex0 = Expression();
     {if (true) return new VarInitExpr().setParms (ex0) ;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AdEBody AdEBody() throws ParseException {
    AddExprChoices ad0=null ;
    MultiplicativeExpression mu0=null ;
    ad0 = AddExprChoices();
    mu0 = MultiplicativeExpression();
     {if (true) return new AdEBod().setParms (ad0, mu0) ;}
    throw new Error("Missing return statement in function");
  }

  final public AddExprChoices AddExprChoices() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case PLUS:
      to0 = jj_consume_token(PLUS);
     {if (true) return new Plus().setParms (t2at(to0)) ;}
      break;
    case MINUS:
      to0 = jj_consume_token(MINUS);
     {if (true) return new Minus().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
    MoreAddExpr mo0=null ;
    MultiplicativeExpression mu0=null ;
    // Merged productions from rule AdditiveExpression
        // (*) MultiplicativeExpression
        // (*) MultiplicativeExpression MoreAddExpr ::AddExpr
        // 
        mu0 = MultiplicativeExpression();
    if (jj_2_4(2)) {
      mo0 = MoreAddExpr();
         {if (true) return new AddExpr().setParms (mu0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (AdditiveExpression) mu0 ;}
    throw new Error("Missing return statement in function");
  }

  final public AllocExprChoices AllocExprChoices() throws ParseException {
    Arguments arSs0=null ;
    ArrayDimsAndInits ar0=null ;
    ClassBody cl0=null ;
    switch (jj_nt.kind) {
    case LBRACKET:
      ar0 = ArrayDimsAndInits();
     {if (true) return (AllocExprChoices) ar0 ;}
      break;
    case LPAREN:
      arSs0 = Arguments();
      switch (jj_nt.kind) {
      case LBRACE:
        cl0 = ClassBody();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
     {if (true) return new AnonClass().setParms (arSs0, opt(cl0)) ;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
    AST_QualifiedName as0=null ;
    AllocExprChoices al0=null ;
    ArrayDimsAndInits ar0=null ;
    PrimitiveType pr0=null ;
    Token to0=null ;
    if (jj_2_5(2)) {
      to0 = jj_consume_token(NEW);
      pr0 = PrimitiveType();
      ar0 = ArrayDimsAndInits();
     {if (true) return new PrimAllocExpr().setParms (t2at(to0), pr0, ar0) ;}
    } else {
      switch (jj_nt.kind) {
      case NEW:
        to0 = jj_consume_token(NEW);
        as0 = AST_QualifiedName();
        al0 = AllocExprChoices();
     {if (true) return new ObjAllocExpr().setParms (t2at(to0), as0, al0) ;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
    EqualityExpression eq0=null ;
    MoreAndExpr mo0=null ;
    // Merged productions from rule AndExpression
        // (*) EqualityExpression
        // (*) EqualityExpression MoreAndExpr ::AndExpr
        // 
        eq0 = EqualityExpression();
    if (jj_2_6(2)) {
      mo0 = MoreAndExpr();
         {if (true) return new AndExpr().setParms (eq0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (AndExpression) eq0 ;}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
    AST_ArgList as0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case 201:
    case IDENTIFIER:
      as0 = AST_ArgList();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RPAREN);
     {if (true) return new Args().setParms (t2at(to0), opt(as0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {
    AST_ArrayInit as0=null ;
    Dims di0=null ;
    ExprDims ex0=null ;
    if (jj_2_8(2)) {
      ex0 = ExprDims();
      if (jj_2_7(2)) {
        di0 = Dims();
      } else {
        ;
      }
     {if (true) return new ArrDim1().setParms (ex0, opt(di0)) ;}
    } else {
      switch (jj_nt.kind) {
      case LBRACKET:
        di0 = Dims();
        as0 = AST_ArrayInit();
     {if (true) return new ArrDim2().setParms (di0, as0) ;}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer() throws ParseException {
    ArrayInitializer list = new ArrayInitializer () ;
    AST_VarInit as0=null ;
    Token to0=null ;
    as0 = AST_VarInit();
     list.add (new ArrayInitializerElem().setParms (as0)) ;
    label_14:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_14;
      }
      to0 = jj_consume_token(COMMA);
      as0 = AST_VarInit();
         list.add (new ArrayInitializerElem().setParms (t2at(to0), as0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case ASSIGN:
      to0 = jj_consume_token(ASSIGN);
     {if (true) return new Assign().setParms (t2at(to0)) ;}
      break;
    case STARASSIGN:
      to0 = jj_consume_token(STARASSIGN);
     {if (true) return new AssnTimes().setParms (t2at(to0)) ;}
      break;
    case SLASHASSIGN:
      to0 = jj_consume_token(SLASHASSIGN);
     {if (true) return new AssnDiv().setParms (t2at(to0)) ;}
      break;
    case REMASSIGN:
      to0 = jj_consume_token(REMASSIGN);
     {if (true) return new AssnMod().setParms (t2at(to0)) ;}
      break;
    case PLUSASSIGN:
      to0 = jj_consume_token(PLUSASSIGN);
     {if (true) return new AssnPlus().setParms (t2at(to0)) ;}
      break;
    case MINUSASSIGN:
      to0 = jj_consume_token(MINUSASSIGN);
     {if (true) return new AssnMinus().setParms (t2at(to0)) ;}
      break;
    case LSHIFTASSIGN:
      to0 = jj_consume_token(LSHIFTASSIGN);
     {if (true) return new AssnShL().setParms (t2at(to0)) ;}
      break;
    case RSIGNEDSHIFTASSIGN:
      to0 = jj_consume_token(RSIGNEDSHIFTASSIGN);
     {if (true) return new AssnShR().setParms (t2at(to0)) ;}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      to0 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
     {if (true) return new AssnShRR().setParms (t2at(to0)) ;}
      break;
    case ANDASSIGN:
      to0 = jj_consume_token(ANDASSIGN);
     {if (true) return new AssnAnd().setParms (t2at(to0)) ;}
      break;
    case XORASSIGN:
      to0 = jj_consume_token(XORASSIGN);
     {if (true) return new AssnXor().setParms (t2at(to0)) ;}
      break;
    case ORASSIGN:
      to0 = jj_consume_token(ORASSIGN);
     {if (true) return new AssnOr().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
    AST_Stmt as0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case GOTO_STATE:
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STM_ESCAPE:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case ALIAS:
    case ENVIRONMENT:
    case 201:
    case IDENTIFIER:
      as0 = AST_Stmt();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RBRACE);
     {if (true) return new BlockC().setParms (t2at(to0), opt(as0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {
    LocalVariableDeclaration lo0=null ;
    Statement st0=null ;
    Token to0=null ;
    UnmodifiedClassDeclaration un0=null ;
    UnmodifiedInterfaceDeclaration unSs0=null ;
    if (jj_2_10(2147483647)) {
      lo0 = LocalVariableDeclaration();
      to0 = jj_consume_token(SEMICOLON);
     {if (true) return new VEStmt().setParms (lo0, t2at(to0)) ;}
    } else if (jj_2_11(2147483647)) {
      lo0 = LocalVariableDeclaration();
      to0 = jj_consume_token(SEMICOLON);
     {if (true) return new BlockStmt().setParms (lo0, t2at(to0)) ;}
    } else {
      switch (jj_nt.kind) {
      case GOTO_STATE:
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STM_ESCAPE:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case ALIAS:
      case ENVIRONMENT:
      case 201:
      case IDENTIFIER:
        st0 = Statement();
     {if (true) return (BlockStatement) st0 ;}
        break;
      case CLASS:
        un0 = UnmodifiedClassDeclaration();
     {if (true) return new BlkClassDcl().setParms (un0) ;}
        break;
      case INTERFACE:
        unSs0 = UnmodifiedInterfaceDeclaration();
     {if (true) return new BlkInterDcl().setParms (unSs0) ;}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case TRUE:
      to0 = jj_consume_token(TRUE);
     {if (true) return new True().setParms (t2at(to0)) ;}
      break;
    case FALSE:
      to0 = jj_consume_token(FALSE);
     {if (true) return new False().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
    QName qn0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(BREAK);
    switch (jj_nt.kind) {
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IDENTIFIER:
      qn0 = QName();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    to1 = jj_consume_token(SEMICOLON);
     {if (true) return new BreakStm().setParms (t2at(to0), opt(qn0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public CAEBody CAEBody() throws ParseException {
    InclusiveOrExpression in0=null ;
    Token to0=null ;
    to0 = jj_consume_token(SC_AND);
    in0 = InclusiveOrExpression();
     {if (true) return new CAEBod().setParms (t2at(to0), in0) ;}
    throw new Error("Missing return statement in function");
  }

  final public COEBody COEBody() throws ParseException {
    ConditionalAndExpression co0=null ;
    Token to0=null ;
    to0 = jj_consume_token(SC_OR);
    co0 = ConditionalAndExpression();
     {if (true) return new COEBod().setParms (t2at(to0), co0) ;}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
    AST_TypeName as0=null ;
    Token to1=null, to0=null ;
    UnaryExpression un0=null ;
    UnaryExpressionNotPlusMinus unSs0=null ;
    if (jj_2_12(2147483647)) {
      to0 = jj_consume_token(LPAREN);
      as0 = AST_TypeName();
      to1 = jj_consume_token(RPAREN);
      un0 = UnaryExpression();
     {if (true) return new CastExpr1().setParms (t2at(to0), as0, t2at(to1), un0) ;}
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
        to0 = jj_consume_token(LPAREN);
        as0 = AST_TypeName();
        to1 = jj_consume_token(RPAREN);
        unSs0 = UnaryExpressionNotPlusMinus();
     {if (true) return new CastExpr2().setParms (t2at(to0), as0, t2at(to1), unSs0) ;}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CastLookahead CastLookahead() throws ParseException {
    AST_QualifiedName as0=null ;
    CastLookaheadChoices ca0=null ;
    PrimitiveType pr0=null ;
    Token to2=null, to1=null, to0=null ;
    if (jj_2_13(2)) {
      to0 = jj_consume_token(LPAREN);
      pr0 = PrimitiveType();
     {if (true) return new Cla1().setParms (t2at(to0), pr0) ;}
    } else if (jj_2_14(2147483647)) {
      to0 = jj_consume_token(LPAREN);
      as0 = AST_QualifiedName();
      to1 = jj_consume_token(LBRACKET);
      to2 = jj_consume_token(RBRACKET);
     {if (true) return new Cla2().setParms (t2at(to0), as0, t2at(to1), t2at(to2)) ;}
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
        to0 = jj_consume_token(LPAREN);
        as0 = AST_QualifiedName();
        to1 = jj_consume_token(RPAREN);
        ca0 = CastLookaheadChoices();
     {if (true) return new Cla3().setParms (t2at(to0), as0, t2at(to1), ca0) ;}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CastLookaheadChoices CastLookaheadChoices() throws ParseException {
    Literal li0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case 201:
      to0 = jj_consume_token(201);
     {if (true) return new CapSuperLA().setParms (t2at(to0)) ;}
      break;
    case TILDE:
      to0 = jj_consume_token(TILDE);
     {if (true) return new TildeLA().setParms (t2at(to0)) ;}
      break;
    case BANG:
      to0 = jj_consume_token(BANG);
     {if (true) return new BangLA().setParms (t2at(to0)) ;}
      break;
    case LPAREN:
      to0 = jj_consume_token(LPAREN);
     {if (true) return new OpParenLA().setParms (t2at(to0)) ;}
      break;
    case IDENTIFIER:
      to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new IdLA().setParms (t2at(to0)) ;}
      break;
    case THIS:
      to0 = jj_consume_token(THIS);
     {if (true) return new ThisLA().setParms (t2at(to0)) ;}
      break;
    case SUPER:
      to0 = jj_consume_token(SUPER);
     {if (true) return new SuperLA().setParms (t2at(to0)) ;}
      break;
    case NEW:
      to0 = jj_consume_token(NEW);
     {if (true) return new NewLA().setParms (t2at(to0)) ;}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      li0 = Literal();
     {if (true) return new LitLA().setParms (li0) ;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Catch Catch() throws ParseException {
    AST_Exp as0=null ;
    Block bl0=null ;
    FormalParameter fo0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case CAT_ESCAPE:
      to0 = jj_consume_token(CAT_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new CatEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case CATCH:
      to0 = jj_consume_token(CATCH);
      to1 = jj_consume_token(LPAREN);
      fo0 = FormalParameter();
      to2 = jj_consume_token(RPAREN);
      bl0 = Block();
     {if (true) return new CatchStmt().setParms
    (t2at(to0), t2at(to1), fo0, t2at(to2), bl0) ;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassBody ClassBody() throws ParseException {
    AST_FieldDecl as0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case STATE_MACHINE:
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case LBRACE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case MOD_ESCAPE:
    case MTH_ESCAPE:
    case TYP_ESCAPE:
    case ENVIRONMENT:
    case OVERRIDES:
    case REFINES:
    case IDENTIFIER:
      as0 = AST_FieldDecl();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RBRACE);
     {if (true) return new ClsBody().setParms (t2at(to0), opt(as0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ClassBodyDeclaration ClassBodyDeclaration() throws ParseException {
    AST_Exp as0=null ;
    ConstructorDeclaration coNj0=null ;
    ConstructorRefinement co0=null ;
    FieldDeclaration fi0=null ;
    Initializer in0=null ;
    MethodDeclaration me0=null ;
    NestedClassDeclaration neSs0=null ;
    NestedInterfaceDeclaration neXv0=null ;
    NestedSmDeclaration ne0=null ;
    Token to2=null, to1=null, to0=null ;
    if (jj_2_15(2147483647)) {
      ne0 = NestedSmDeclaration();
     {if (true) return (ClassBodyDeclaration) ne0 ;}
    } else {
      switch (jj_nt.kind) {
      case REFINES:
        co0 = ConstructorRefinement();
     {if (true) return (ClassBodyDeclaration) co0 ;}
        break;
      default:
        jj_la1[36] = jj_gen;
        if (jj_2_16(2)) {
          to0 = jj_consume_token(IDENTIFIER);
          to1 = jj_consume_token(SEMICOLON);
     {if (true) return new MthIscape().setParms (t2at(to0), t2at(to1)) ;}
        } else {
          switch (jj_nt.kind) {
          case MTH_ESCAPE:
            to0 = jj_consume_token(MTH_ESCAPE);
            to1 = jj_consume_token(LPAREN);
            as0 = AST_Exp();
            to2 = jj_consume_token(RPAREN);
     {if (true) return new MthEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
            break;
          default:
            jj_la1[37] = jj_gen;
            if (jj_2_17(2)) {
              in0 = Initializer();
     {if (true) return (ClassBodyDeclaration) in0 ;}
            } else if (jj_2_18(2147483647)) {
              neSs0 = NestedClassDeclaration();
     {if (true) return (ClassBodyDeclaration) neSs0 ;}
            } else if (jj_2_19(2147483647)) {
              neXv0 = NestedInterfaceDeclaration();
     {if (true) return (ClassBodyDeclaration) neXv0 ;}
            } else if (jj_2_20(2147483647)) {
              coNj0 = ConstructorDeclaration();
     {if (true) return (ClassBodyDeclaration) coNj0 ;}
            } else if (jj_2_21(2147483647)) {
              me0 = MethodDeclaration();
     {if (true) return (ClassBodyDeclaration) me0 ;}
            } else {
              switch (jj_nt.kind) {
              case ABSTRACT:
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FINAL:
              case FLOAT:
              case INT:
              case LONG:
              case NATIVE:
              case NEW:
              case PRIVATE:
              case PROTECTED:
              case PUBLIC:
              case SHORT:
              case STATIC:
              case SYNCHRONIZED:
              case TRANSIENT:
              case VOID:
              case VOLATILE:
              case ID_ESCAPE:
              case NAMEID_ESCAPE:
              case MOD_ESCAPE:
              case TYP_ESCAPE:
              case ENVIRONMENT:
              case OVERRIDES:
              case IDENTIFIER:
                fi0 = FieldDeclaration();
     {if (true) return (ClassBodyDeclaration) fi0 ;}
                break;
              default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression in0=null ;
    MoreCondAndExpr mo0=null ;
    // Merged productions from rule ConditionalAndExpression
        // (*) InclusiveOrExpression
        // (*) InclusiveOrExpression MoreCondAndExpr ::CondAndExpr
        // 
        in0 = InclusiveOrExpression();
    if (jj_2_22(2)) {
      mo0 = MoreCondAndExpr();
         {if (true) return new CondAndExpr().setParms (in0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (ConditionalAndExpression) in0 ;}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
    AST_Exp as0=null ;
    ConditionalExpression coSs0=null ;
    ConditionalOrExpression co0=null ;
    Expression ex0=null ;
    JakartaSST ja0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case XLST_ESCAPE:
      to0 = jj_consume_token(XLST_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new XlstEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case ID_BEGIN:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
      ja0 = JakartaSST();
     {if (true) return (ConditionalExpression) ja0 ;}
      break;
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case EXP_ESCAPE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case STR_ESCAPE:
    case TYP_ESCAPE:
    case 201:
    case IDENTIFIER:
      // Merged productions from rule ConditionalExpression
          // (*) ConditionalOrExpression
          // (*) ConditionalOrExpression "?" Expression ":" ConditionalExpression ::QuestExpr
          // 
          co0 = ConditionalOrExpression();
      if (jj_2_23(2)) {
        to0 = jj_consume_token(HOOK);
        ex0 = Expression();
        to1 = jj_consume_token(COLON);
        coSs0 = ConditionalExpression();
         {if (true) return new QuestExpr().setParms
        (co0, t2at(to0), ex0, t2at(to1), coSs0) ;}
      } else {
        ;
      }
     {if (true) return (ConditionalExpression) co0 ;}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression co0=null ;
    MoreCondOrExpr mo0=null ;
    // Merged productions from rule ConditionalOrExpression
        // (*) ConditionalAndExpression
        // (*) ConditionalAndExpression MoreCondOrExpr ::CondOrExpr
        // 
        co0 = ConditionalAndExpression();
    if (jj_2_24(2)) {
      mo0 = MoreCondOrExpr();
         {if (true) return new CondOrExpr().setParms (co0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (ConditionalOrExpression) co0 ;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    AST_ParList asSs0=null ;
    AST_Stmt asXv0=null ;
    ExplicitConstructorInvocation ex0=null ;
    QName qn0=null ;
    ThrowsClause th0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    qn0 = QName();
    to0 = jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case PLST_ESCAPE:
    case TYP_ESCAPE:
    case IDENTIFIER:
      asSs0 = AST_ParList();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RPAREN);
    switch (jj_nt.kind) {
    case THROWS:
      th0 = ThrowsClause();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    to2 = jj_consume_token(LBRACE);
    if (jj_2_25(2147483647)) {
      ex0 = ExplicitConstructorInvocation();
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case GOTO_STATE:
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STM_ESCAPE:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case ALIAS:
    case ENVIRONMENT:
    case 201:
    case IDENTIFIER:
      asXv0 = AST_Stmt();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    to3 = jj_consume_token(RBRACE);
     {if (true) return new ConDecl().setParms
    (opt(as0), qn0, t2at(to0), opt(asSs0), t2at(to1), opt(th0), t2at(to2), opt(ex0), opt(asXv0), t2at(to3)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorRefinement ConstructorRefinement() throws ParseException {
    AST_ParList as0=null ;
    AST_Stmt asSs0=null ;
    QName qn0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(REFINES);
    qn0 = QName();
    to1 = jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case PLST_ESCAPE:
    case TYP_ESCAPE:
    case IDENTIFIER:
      as0 = AST_ParList();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    to2 = jj_consume_token(RPAREN);
    to3 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case GOTO_STATE:
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STM_ESCAPE:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case ALIAS:
    case ENVIRONMENT:
    case 201:
    case IDENTIFIER:
      asSs0 = AST_Stmt();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    to4 = jj_consume_token(RBRACE);
     {if (true) return new RefCons().setParms
    (t2at(to0), qn0, t2at(to1), opt(as0), t2at(to2), t2at(to3), opt(asSs0), t2at(to4)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
    QName qn0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(CONTINUE);
    switch (jj_nt.kind) {
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IDENTIFIER:
      qn0 = QName();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ContinueStm().setParms (t2at(to0), opt(qn0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public DeclNameList DeclNameList() throws ParseException {
    DeclNameList list = new DeclNameList () ;
    QName qn0=null ;
    Token to0=null ;
    qn0 = QName();
     list.add (new DeclNameListElem().setParms (qn0)) ;
    label_15:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_15;
      }
      to0 = jj_consume_token(COMMA);
      qn0 = QName();
         list.add (new DeclNameListElem().setParms (t2at(to0), qn0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public DelivClause DelivClause() throws ParseException {
    AST_ParList as0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(DELIVERY);
    to1 = jj_consume_token(LPAREN);
    as0 = AST_ParList();
    to2 = jj_consume_token(RPAREN);
    to3 = jj_consume_token(SEMICOLON);
     {if (true) return new DelivDecl().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2), t2at(to3)) ;}
    throw new Error("Missing return statement in function");
  }

  final public Dim Dim() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LBRACKET);
    to1 = jj_consume_token(RBRACKET);
     {if (true) return new Dim2().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public Dims Dims() throws ParseException {
    Dims list = new Dims () ;
    Dim di0=null ;
    label_16:
    while (true) {
      di0 = Dim();
         list.add (new DimsElem().setParms (di0)) ;
      if (jj_2_26(2)) {
        ;
      } else {
        break label_16;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
    Expression ex0=null ;
    Statement st0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(DO);
    st0 = Statement();
    to1 = jj_consume_token(WHILE);
    to2 = jj_consume_token(LPAREN);
    ex0 = Expression();
    to3 = jj_consume_token(RPAREN);
    to4 = jj_consume_token(SEMICOLON);
     {if (true) return new DoWhileStm().setParms
    (t2at(to0), st0, t2at(to1), t2at(to2), ex0, t2at(to3), t2at(to4)) ;}
    throw new Error("Missing return statement in function");
  }

  final public DotTimes DotTimes() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(DOT);
    to1 = jj_consume_token(STAR);
     {if (true) return new DotTimesC().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public EEBody EEBody() throws ParseException {
    EqExprChoices eq0=null ;
    InstanceOfExpression in0=null ;
    eq0 = EqExprChoices();
    in0 = InstanceOfExpression();
     {if (true) return new EEBodyC().setParms (eq0, in0) ;}
    throw new Error("Missing return statement in function");
  }

  final public EOEBody EOEBody() throws ParseException {
    AndExpression an0=null ;
    Token to0=null ;
    to0 = jj_consume_token(XOR);
    an0 = AndExpression();
     {if (true) return new EOEBod().setParms (t2at(to0), an0) ;}
    throw new Error("Missing return statement in function");
  }

  final public ESList ESList() throws ParseException {
    ESList list = new ESList () ;
    Es es0=null ;
    label_17:
    while (true) {
      es0 = Es();
         list.add (new ESListElem().setParms (es0)) ;
      switch (jj_nt.kind) {
      case EDGE:
      case EDGEACTION:
      case EDGETEST:
      case ENTER:
      case EXIT:
      case OTHERWISE:
      case PREPARE:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_17;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public ElseClause ElseClause() throws ParseException {
    Statement st0=null ;
    Token to0=null ;
    to0 = jj_consume_token(ELSE);
    st0 = Statement();
     {if (true) return new ElseClauseC().setParms (t2at(to0), st0) ;}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
    Token to0=null ;
    to0 = jj_consume_token(SEMICOLON);
     {if (true) return new Empty().setParms (t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public EqExprChoices EqExprChoices() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case EQ:
      to0 = jj_consume_token(EQ);
     {if (true) return new Eq().setParms (t2at(to0)) ;}
      break;
    case NE:
      to0 = jj_consume_token(NE);
     {if (true) return new Neq().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
    InstanceOfExpression in0=null ;
    MoreEqExpr mo0=null ;
    // Merged productions from rule EqualityExpression
        // (*) InstanceOfExpression
        // (*) InstanceOfExpression MoreEqExpr ::EqExpr
        // 
        in0 = InstanceOfExpression();
    if (jj_2_27(2)) {
      mo0 = MoreEqExpr();
         {if (true) return new EqExpr().setParms (in0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (EqualityExpression) in0 ;}
    throw new Error("Missing return statement in function");
  }

  final public Es Es() throws ParseException {
    AST_Exp as0=null ;
    Block bl0=null ;
    QName qn1=null, qn0=null ;
    StartName st0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case EXIT:
      to0 = jj_consume_token(EXIT);
      qn0 = QName();
      bl0 = Block();
     {if (true) return new ExitDecl().setParms (t2at(to0), qn0, bl0) ;}
      break;
    case ENTER:
      to0 = jj_consume_token(ENTER);
      qn0 = QName();
      bl0 = Block();
     {if (true) return new EnterDecl().setParms (t2at(to0), qn0, bl0) ;}
      break;
    case PREPARE:
      to0 = jj_consume_token(PREPARE);
      qn0 = QName();
      bl0 = Block();
     {if (true) return new PrepareDecl().setParms (t2at(to0), qn0, bl0) ;}
      break;
    case EDGETEST:
      to0 = jj_consume_token(EDGETEST);
      qn0 = QName();
      as0 = AST_Exp();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new TestDecl().setParms (t2at(to0), qn0, as0, t2at(to1)) ;}
      break;
    case EDGEACTION:
      to0 = jj_consume_token(EDGEACTION);
      qn0 = QName();
      bl0 = Block();
     {if (true) return new ActionDecl().setParms (t2at(to0), qn0, bl0) ;}
      break;
    case EDGE:
      to0 = jj_consume_token(EDGE);
      qn0 = QName();
      to1 = jj_consume_token(COLON);
      st0 = StartName();
      to2 = jj_consume_token(ARROW);
      qn1 = QName();
      to3 = jj_consume_token(CONDITION);
      as0 = AST_Exp();
      to4 = jj_consume_token(DO);
      bl0 = Block();
     {if (true) return new TransitionDecl().setParms
    (t2at(to0), qn0, t2at(to1), st0, t2at(to2), qn1, t2at(to3), as0, t2at(to4), bl0) ;}
      break;
    case OTHERWISE:
      to0 = jj_consume_token(OTHERWISE);
      qn0 = QName();
      bl0 = Block();
     {if (true) return new OtherDecl().setParms (t2at(to0), qn0, bl0) ;}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExDimBody ExDimBody() throws ParseException {
    Expression ex0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LBRACKET);
    ex0 = Expression();
    to1 = jj_consume_token(RBRACKET);
     {if (true) return new ExDimBod().setParms (t2at(to0), ex0, t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
    AndExpression an0=null ;
    MoreExclOrExpr mo0=null ;
    // Merged productions from rule ExclusiveOrExpression
        // (*) AndExpression
        // (*) AndExpression MoreExclOrExpr ::ExclOrExpr
        // 
        an0 = AndExpression();
    if (jj_2_28(2)) {
      mo0 = MoreExclOrExpr();
         {if (true) return new ExclOrExpr().setParms (an0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (ExclusiveOrExpression) an0 ;}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {
    AST_TypeNameList as0=null ;
    Arguments ar0=null ;
    PrimDot pr0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    if (jj_2_30(3)) {
      to0 = jj_consume_token(201);
      to1 = jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case TLST_ESCAPE:
      case TYP_ESCAPE:
      case IDENTIFIER:
        as0 = AST_TypeNameList();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      to2 = jj_consume_token(RPAREN);
      ar0 = Arguments();
      to3 = jj_consume_token(SEMICOLON);
     {if (true) return new ConSSuper().setParms
    (t2at(to0), t2at(to1), opt(as0), t2at(to2), ar0, t2at(to3)) ;}
    } else if (jj_2_31(2147483647)) {
      to0 = jj_consume_token(THIS);
      ar0 = Arguments();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ConThis().setParms (t2at(to0), ar0, t2at(to1)) ;}
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case EXP_ESCAPE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case STR_ESCAPE:
      case TYP_ESCAPE:
      case 201:
      case IDENTIFIER:
        if (jj_2_29(2)) {
          pr0 = PrimDot();
        } else {
          ;
        }
        to0 = jj_consume_token(SUPER);
        ar0 = Arguments();
        to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ConSuper().setParms (opt(pr0), t2at(to0), ar0, t2at(to1)) ;}
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprDims ExprDims() throws ParseException {
    ExprDims list = new ExprDims () ;
    ExDimBody ex0=null ;
    label_18:
    while (true) {
      ex0 = ExDimBody();
         list.add (new ExprDimsElem().setParms (ex0)) ;
      if (jj_2_32(2)) {
        ;
      } else {
        break label_18;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
    AssignmentOperator as0=null ;
    ConditionalExpression co0=null ;
    Expression ex0=null ;
    // Merged productions from rule Expression
        // (*) ConditionalExpression
        // (*) ConditionalExpression AssignmentOperator Expression ::AsgExpr
        // 
        co0 = ConditionalExpression();
    if (jj_2_33(2)) {
      as0 = AssignmentOperator();
      ex0 = Expression();
         {if (true) return new AsgExpr().setParms (co0, as0, ex0) ;}
    } else {
      ;
    }
     {if (true) return (Expression) co0 ;}
    throw new Error("Missing return statement in function");
  }

  final public ExtendsClause ExtendsClause() throws ParseException {
    AST_QualifiedName as0=null ;
    Token to0=null ;
    to0 = jj_consume_token(EXTENDS);
    as0 = AST_QualifiedName();
     {if (true) return new ExtClause().setParms (t2at(to0), as0) ;}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    AST_TypeName asSs0=null ;
    AST_VarDecl asXv0=null ;
    DeclNameList de0=null ;
    Token to1=null, to0=null ;
    switch (jj_nt.kind) {
    case ENVIRONMENT:
      to0 = jj_consume_token(ENVIRONMENT);
      switch (jj_nt.kind) {
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IDENTIFIER:
        de0 = DeclNameList();
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new Env().setParms (t2at(to0), opt(de0), t2at(to1)) ;}
      break;
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case MOD_ESCAPE:
    case TYP_ESCAPE:
    case OVERRIDES:
    case IDENTIFIER:
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case MOD_ESCAPE:
      case OVERRIDES:
        as0 = AST_Modifiers();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      asSs0 = AST_TypeName();
      asXv0 = AST_VarDecl();
      to0 = jj_consume_token(SEMICOLON);
     {if (true) return new FldVarDec().setParms (opt(as0), asSs0, asXv0, t2at(to0)) ;}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Finally Finally() throws ParseException {
    Block bl0=null ;
    Token to0=null ;
    to0 = jj_consume_token(FINALLY);
    bl0 = Block();
     {if (true) return new FinallyC().setParms (t2at(to0), bl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public ForInit ForInit() throws ParseException {
    LocalVariableDeclaration lo0=null ;
    StatementExpressionList st0=null ;
    if (jj_2_34(2147483647)) {
      lo0 = LocalVariableDeclaration();
     {if (true) return (ForInit) lo0 ;}
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INCR:
      case DECR:
      case ESTM_ESCAPE:
      case EXP_ESCAPE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case STR_ESCAPE:
      case TYP_ESCAPE:
      case 201:
      case IDENTIFIER:
        st0 = StatementExpressionList();
     {if (true) return new FIExprList().setParms (st0) ;}
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
    Expression ex0=null ;
    ForInit fo0=null ;
    ForUpdate foSs0=null ;
    Statement st0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(FOR);
    to1 = jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INCR:
    case DECR:
    case ESTM_ESCAPE:
    case EXP_ESCAPE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case STR_ESCAPE:
    case TYP_ESCAPE:
    case 201:
    case IDENTIFIER:
      fo0 = ForInit();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    to2 = jj_consume_token(SEMICOLON);
    switch (jj_nt.kind) {
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case 201:
    case IDENTIFIER:
      ex0 = Expression();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    to3 = jj_consume_token(SEMICOLON);
    switch (jj_nt.kind) {
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INCR:
    case DECR:
    case ESTM_ESCAPE:
    case EXP_ESCAPE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case STR_ESCAPE:
    case TYP_ESCAPE:
    case 201:
    case IDENTIFIER:
      foSs0 = ForUpdate();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    to4 = jj_consume_token(RPAREN);
    st0 = Statement();
     {if (true) return new ForStmt().setParms
    (t2at(to0), t2at(to1), opt(fo0), t2at(to2), opt(ex0), t2at(to3), opt(foSs0), t2at(to4), st0) ;}
    throw new Error("Missing return statement in function");
  }

  final public ForUpdate ForUpdate() throws ParseException {
    StatementExpressionList st0=null ;
    st0 = StatementExpressionList();
     {if (true) return new StmExprList().setParms (st0) ;}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
    AST_Exp as0=null ;
    AST_TypeName asSs0=null ;
    Token to2=null, to1=null, to0=null ;
    VariableDeclaratorId va0=null ;
    if (jj_2_35(2147483647)) {
      to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new PlstIscape().setParms (t2at(to0)) ;}
    } else {
      switch (jj_nt.kind) {
      case PLST_ESCAPE:
        to0 = jj_consume_token(PLST_ESCAPE);
        to1 = jj_consume_token(LPAREN);
        as0 = AST_Exp();
        to2 = jj_consume_token(RPAREN);
     {if (true) return new PlstEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case TYP_ESCAPE:
      case IDENTIFIER:
        switch (jj_nt.kind) {
        case FINAL:
          to0 = jj_consume_token(FINAL);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        asSs0 = AST_TypeName();
        va0 = VariableDeclaratorId();
     {if (true) return new FormParDecl().setParms (opt(t2at(to0)), asSs0, va0) ;}
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IOEBody IOEBody() throws ParseException {
    ExclusiveOrExpression ex0=null ;
    Token to0=null ;
    to0 = jj_consume_token(BIT_OR);
    ex0 = ExclusiveOrExpression();
     {if (true) return new IOEBod().setParms (t2at(to0), ex0) ;}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
    ElseClause el0=null ;
    Expression ex0=null ;
    Statement st0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(IF);
    to1 = jj_consume_token(LPAREN);
    ex0 = Expression();
    to2 = jj_consume_token(RPAREN);
    st0 = Statement();
    switch (jj_nt.kind) {
    case ELSE:
      el0 = ElseClause();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
     {if (true) return new IfStmt().setParms
    (t2at(to0), t2at(to1), ex0, t2at(to2), st0, opt(el0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ImplementsClause ImplementsClause() throws ParseException {
    AST_TypeNameList as0=null ;
    Token to0=null ;
    to0 = jj_consume_token(IMPLEMENTS);
    as0 = AST_TypeNameList();
     {if (true) return new ImplClause().setParms (t2at(to0), as0) ;}
    throw new Error("Missing return statement in function");
  }

  final public ImportDeclaration ImportDeclaration() throws ParseException {
    AST_Exp as0=null ;
    AST_QualifiedName asSs0=null ;
    DotTimes do0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case IMP_ESCAPE:
      to0 = jj_consume_token(IMP_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
      to3 = jj_consume_token(SEMICOLON);
     {if (true) return new ImpEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2), t2at(to3)) ;}
      break;
    case IMPORT:
      to0 = jj_consume_token(IMPORT);
      asSs0 = AST_QualifiedName();
      switch (jj_nt.kind) {
      case DOT:
        do0 = DotTimes();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ImpQual().setParms (t2at(to0), asSs0, opt(do0), t2at(to1)) ;}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression ex0=null ;
    MoreInclOrExpr mo0=null ;
    // Merged productions from rule InclusiveOrExpression
        // (*) ExclusiveOrExpression
        // (*) ExclusiveOrExpression MoreInclOrExpr ::InclOrExpr
        // 
        ex0 = ExclusiveOrExpression();
    if (jj_2_36(2)) {
      mo0 = MoreInclOrExpr();
         {if (true) return new InclOrExpr().setParms (ex0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (InclusiveOrExpression) ex0 ;}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
    Block bl0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case STATIC:
      to0 = jj_consume_token(STATIC);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    bl0 = Block();
     {if (true) return new Init().setParms (opt(t2at(to0)), bl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public InstanceOfExpression InstanceOfExpression() throws ParseException {
    AST_TypeName as0=null ;
    RelationalExpression re0=null ;
    Token to0=null ;
    // Merged productions from rule InstanceOfExpression
        // (*) RelationalExpression
        // (*) RelationalExpression "instanceof" AST_TypeName ::IoExpr
        // 
        re0 = RelationalExpression();
    if (jj_2_37(2)) {
      to0 = jj_consume_token(INSTANCEOF);
      as0 = AST_TypeName();
         {if (true) return new IoExpr().setParms (re0, t2at(to0), as0) ;}
    } else {
      ;
    }
     {if (true) return (InstanceOfExpression) re0 ;}
    throw new Error("Missing return statement in function");
  }

  final public IntExtClause IntExtClause() throws ParseException {
    AST_TypeNameList as0=null ;
    Token to0=null ;
    to0 = jj_consume_token(EXTENDS);
    as0 = AST_TypeNameList();
     {if (true) return new IntExtClauseC().setParms (t2at(to0), as0) ;}
    throw new Error("Missing return statement in function");
  }

  final public InterfaceMemberDeclaration InterfaceMemberDeclaration() throws ParseException {
    FieldDeclaration fi0=null ;
    MethodDeclaration me0=null ;
    NestedClassDeclaration ne0=null ;
    NestedInterfaceDeclaration neSs0=null ;
    if (jj_2_38(2147483647)) {
      ne0 = NestedClassDeclaration();
     {if (true) return new NCDecl().setParms (ne0) ;}
    } else if (jj_2_39(2147483647)) {
      neSs0 = NestedInterfaceDeclaration();
     {if (true) return new NIDecl().setParms (neSs0) ;}
    } else if (jj_2_40(2147483647)) {
      me0 = MethodDeclaration();
     {if (true) return new MDecl().setParms (me0) ;}
    } else {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case MOD_ESCAPE:
      case TYP_ESCAPE:
      case ENVIRONMENT:
      case OVERRIDES:
      case IDENTIFIER:
        fi0 = FieldDeclaration();
     {if (true) return new FDecl().setParms (fi0) ;}
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public InterfaceMemberDeclarations InterfaceMemberDeclarations() throws ParseException {
    InterfaceMemberDeclarations list = new InterfaceMemberDeclarations () ;
    InterfaceMemberDeclaration in0=null ;
    label_19:
    while (true) {
      in0 = InterfaceMemberDeclaration();
         list.add (new InterfaceMemberDeclarationsElem().setParms (in0)) ;
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case MOD_ESCAPE:
      case TYP_ESCAPE:
      case ENVIRONMENT:
      case OVERRIDES:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_19;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public JakartaSST JakartaSST() throws ParseException {
    AST_ArgList asSt0=null ;
    AST_ArrayInit asKr0=null ;
    AST_Catches asKg0=null ;
    AST_Class asHp0=null ;
    AST_Exp as0=null ;
    AST_ExpStmt asZx0=null ;
    AST_FieldDecl asNj0=null ;
    AST_Imports asBc0=null ;
    AST_Modifiers asWv0=null ;
    AST_ParList asRa0=null ;
    AST_Program asDq0=null ;
    AST_QualifiedName asVc0=null ;
    AST_Stmt asSs0=null ;
    AST_SwitchEntry asXv0=null ;
    AST_TypeName asDx0=null ;
    AST_TypeNameList asVy0=null ;
    AST_VarDecl asMg0=null ;
    AST_VarInit asNy0=null ;
    Token to1=null, to0=null ;
    switch (jj_nt.kind) {
    case EXP_BEGIN:
      to0 = jj_consume_token(EXP_BEGIN);
      as0 = AST_Exp();
      to1 = jj_consume_token(EXP_END);
     {if (true) return new AST_ExpC().setParms (t2at(to0), as0, t2at(to1)) ;}
      break;
    case STM_BEGIN:
      to0 = jj_consume_token(STM_BEGIN);
      switch (jj_nt.kind) {
      case GOTO_STATE:
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STM_ESCAPE:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case ALIAS:
      case ENVIRONMENT:
      case 201:
      case IDENTIFIER:
        asSs0 = AST_Stmt();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      to1 = jj_consume_token(STM_END);
     {if (true) return new AST_StmtC().setParms (t2at(to0), opt(asSs0), t2at(to1)) ;}
      break;
    case CASE_BEGIN:
      to0 = jj_consume_token(CASE_BEGIN);
      asXv0 = AST_SwitchEntry();
      to1 = jj_consume_token(CASE_END);
     {if (true) return new AST_SwitchEntryC().setParms (t2at(to0), asXv0, t2at(to1)) ;}
      break;
    case MTH_BEGIN:
      to0 = jj_consume_token(MTH_BEGIN);
      switch (jj_nt.kind) {
      case STATE_MACHINE:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case MOD_ESCAPE:
      case MTH_ESCAPE:
      case TYP_ESCAPE:
      case ENVIRONMENT:
      case OVERRIDES:
      case REFINES:
      case IDENTIFIER:
        asNj0 = AST_FieldDecl();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      to1 = jj_consume_token(MTH_END);
     {if (true) return new AST_FieldDeclC().setParms
    (t2at(to0), opt(asNj0), t2at(to1)) ;}
      break;
    case CLS_BEGIN:
      to0 = jj_consume_token(CLS_BEGIN);
      switch (jj_nt.kind) {
      case STATE_MACHINE:
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case CLS_ESCAPE:
      case MOD_ESCAPE:
      case OVERRIDES:
      case REFINES:
      case SOURCE:
      case 203:
      case IDENTIFIER:
        asHp0 = AST_Class();
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      to1 = jj_consume_token(CLS_END);
     {if (true) return new AST_ClassC().setParms (t2at(to0), opt(asHp0), t2at(to1)) ;}
      break;
    case PRG_BEGIN:
      to0 = jj_consume_token(PRG_BEGIN);
      asDq0 = AST_Program();
      to1 = jj_consume_token(PRG_END);
     {if (true) return new AST_ProgramC().setParms (t2at(to0), asDq0, t2at(to1)) ;}
      break;
    case TYP_BEGIN:
      to0 = jj_consume_token(TYP_BEGIN);
      asDx0 = AST_TypeName();
      to1 = jj_consume_token(TYP_END);
     {if (true) return new AST_TypeNameC().setParms (t2at(to0), asDx0, t2at(to1)) ;}
      break;
    case ID_BEGIN:
      to0 = jj_consume_token(ID_BEGIN);
      asVc0 = AST_QualifiedName();
      to1 = jj_consume_token(ID_END);
     {if (true) return new AST_QualifiedNameC().setParms (t2at(to0), asVc0, t2at(to1)) ;}
      break;
    case PLST_BEGIN:
      to0 = jj_consume_token(PLST_BEGIN);
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case PLST_ESCAPE:
      case TYP_ESCAPE:
      case IDENTIFIER:
        asRa0 = AST_ParList();
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      to1 = jj_consume_token(PLST_END);
     {if (true) return new AST_ParListC().setParms (t2at(to0), opt(asRa0), t2at(to1)) ;}
      break;
    case XLST_BEGIN:
      to0 = jj_consume_token(XLST_BEGIN);
      switch (jj_nt.kind) {
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case 201:
      case IDENTIFIER:
        asSt0 = AST_ArgList();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      to1 = jj_consume_token(XLST_END);
     {if (true) return new AST_ArgListC().setParms (t2at(to0), opt(asSt0), t2at(to1)) ;}
      break;
    case TLST_BEGIN:
      to0 = jj_consume_token(TLST_BEGIN);
      asVy0 = AST_TypeNameList();
      to1 = jj_consume_token(TLST_END);
     {if (true) return new AST_TypeNameListC().setParms (t2at(to0), asVy0, t2at(to1)) ;}
      break;
    case IMP_BEGIN:
      to0 = jj_consume_token(IMP_BEGIN);
      switch (jj_nt.kind) {
      case IMPORT:
      case IMP_ESCAPE:
        asBc0 = AST_Imports();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      to1 = jj_consume_token(IMP_END);
     {if (true) return new AST_ImportsC().setParms (t2at(to0), opt(asBc0), t2at(to1)) ;}
      break;
    case MOD_BEGIN:
      to0 = jj_consume_token(MOD_BEGIN);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case MOD_ESCAPE:
      case OVERRIDES:
        asWv0 = AST_Modifiers();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      to1 = jj_consume_token(MOD_END);
     {if (true) return new AST_ModifiersC().setParms
    (t2at(to0), opt(asWv0), t2at(to1)) ;}
      break;
    case VLST_BEGIN:
      to0 = jj_consume_token(VLST_BEGIN);
      asMg0 = AST_VarDecl();
      to1 = jj_consume_token(VLST_END);
     {if (true) return new AST_VarDeclC().setParms (t2at(to0), asMg0, t2at(to1)) ;}
      break;
    case VI_BEGIN:
      to0 = jj_consume_token(VI_BEGIN);
      asNy0 = AST_VarInit();
      to1 = jj_consume_token(VI_END);
     {if (true) return new AST_VarInitC().setParms (t2at(to0), asNy0, t2at(to1)) ;}
      break;
    case AI_BEGIN:
      to0 = jj_consume_token(AI_BEGIN);
      asKr0 = AST_ArrayInit();
      to1 = jj_consume_token(AI_END);
     {if (true) return new AST_ArrayInitC().setParms (t2at(to0), asKr0, t2at(to1)) ;}
      break;
    case ESTM_BEGIN:
      to0 = jj_consume_token(ESTM_BEGIN);
      asZx0 = AST_ExpStmt();
      to1 = jj_consume_token(ESTM_END);
     {if (true) return new AST_ExpStmtC().setParms (t2at(to0), asZx0, t2at(to1)) ;}
      break;
    case CAT_BEGIN:
      to0 = jj_consume_token(CAT_BEGIN);
      switch (jj_nt.kind) {
      case CATCH:
      case CAT_ESCAPE:
        asKg0 = AST_Catches();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      to1 = jj_consume_token(CAT_END);
     {if (true) return new AST_CatchesC().setParms (t2at(to0), opt(asKg0), t2at(to1)) ;}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
    QName qn0=null ;
    Statement st0=null ;
    Token to0=null ;
    qn0 = QName();
    to0 = jj_consume_token(COLON);
    st0 = Statement();
     {if (true) return new LabeledStmt().setParms (qn0, t2at(to0), st0) ;}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
    BooleanLiteral bo0=null ;
    NullLiteral nu0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
      to0 = jj_consume_token(INTEGER_LITERAL);
     {if (true) return new IntLit().setParms (t2at(to0)) ;}
      break;
    case FLOATING_POINT_LITERAL:
      to0 = jj_consume_token(FLOATING_POINT_LITERAL);
     {if (true) return new FPLit().setParms (t2at(to0)) ;}
      break;
    case CHARACTER_LITERAL:
      to0 = jj_consume_token(CHARACTER_LITERAL);
     {if (true) return new CharLit().setParms (t2at(to0)) ;}
      break;
    case STRING_LITERAL:
      to0 = jj_consume_token(STRING_LITERAL);
     {if (true) return new StrLit().setParms (t2at(to0)) ;}
      break;
    case FALSE:
    case TRUE:
      bo0 = BooleanLiteral();
     {if (true) return (Literal) bo0 ;}
      break;
    case NULL:
      nu0 = NullLiteral();
     {if (true) return (Literal) nu0 ;}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
    AST_TypeName as0=null ;
    AST_VarDecl asSs0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case FINAL:
      to0 = jj_consume_token(FINAL);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    as0 = AST_TypeName();
    asSs0 = AST_VarDecl();
     {if (true) return new LocalVarDecl().setParms (opt(t2at(to0)), as0, asSs0) ;}
    throw new Error("Missing return statement in function");
  }

  final public MEBody MEBody() throws ParseException {
    MultExprChoices mu0=null ;
    UnaryExpression un0=null ;
    mu0 = MultExprChoices();
    un0 = UnaryExpression();
     {if (true) return new MEBod().setParms (mu0, un0) ;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclSuffix MethodDeclSuffix() throws ParseException {
    Block bl0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case LBRACE:
      bl0 = Block();
     {if (true) return new MDSBlock().setParms (bl0) ;}
      break;
    case SEMICOLON:
      to0 = jj_consume_token(SEMICOLON);
     {if (true) return new MDSEmpty().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    AST_TypeName asSs0=null ;
    MethodDeclSuffix meXv0=null ;
    MethodDeclarator me0=null ;
    ThrowsClause th0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    asSs0 = AST_TypeName();
    me0 = MethodDeclarator();
    switch (jj_nt.kind) {
    case THROWS:
      th0 = ThrowsClause();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    meXv0 = MethodDeclSuffix();
     {if (true) return new MethodDcl().setParms
    (opt(as0), asSs0, me0, opt(th0), meXv0) ;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarationLookahead MethodDeclarationLookahead() throws ParseException {
    AST_Modifiers as0=null ;
    AST_TypeName asSs0=null ;
    QName qn0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    asSs0 = AST_TypeName();
    qn0 = QName();
    to0 = jj_consume_token(LPAREN);
     {if (true) return new MDeclLA().setParms (opt(as0), asSs0, qn0, t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarator MethodDeclarator() throws ParseException {
    AST_ParList as0=null ;
    Dims di0=null ;
    QName qn0=null ;
    Token to1=null, to0=null ;
    qn0 = QName();
    to0 = jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case PLST_ESCAPE:
    case TYP_ESCAPE:
    case IDENTIFIER:
      as0 = AST_ParList();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RPAREN);
    switch (jj_nt.kind) {
    case LBRACKET:
      di0 = Dims();
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
     {if (true) return new MthDector().setParms
    (qn0, t2at(to0), opt(as0), t2at(to1), opt(di0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
    AST_Exp as0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case NEW:
      to0 = jj_consume_token(NEW);
     {if (true) return new ModNew().setParms (t2at(to0)) ;}
      break;
    case OVERRIDES:
      to0 = jj_consume_token(OVERRIDES);
     {if (true) return new ModOverrides().setParms (t2at(to0)) ;}
      break;
    case MOD_ESCAPE:
      to0 = jj_consume_token(MOD_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new ModEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case ABSTRACT:
      to0 = jj_consume_token(ABSTRACT);
     {if (true) return new ModAbstract().setParms (t2at(to0)) ;}
      break;
    case FINAL:
      to0 = jj_consume_token(FINAL);
     {if (true) return new ModFinal().setParms (t2at(to0)) ;}
      break;
    case PUBLIC:
      to0 = jj_consume_token(PUBLIC);
     {if (true) return new ModPublic().setParms (t2at(to0)) ;}
      break;
    case PROTECTED:
      to0 = jj_consume_token(PROTECTED);
     {if (true) return new ModProtected().setParms (t2at(to0)) ;}
      break;
    case PRIVATE:
      to0 = jj_consume_token(PRIVATE);
     {if (true) return new ModPrivate().setParms (t2at(to0)) ;}
      break;
    case STATIC:
      to0 = jj_consume_token(STATIC);
     {if (true) return new ModStatic().setParms (t2at(to0)) ;}
      break;
    case TRANSIENT:
      to0 = jj_consume_token(TRANSIENT);
     {if (true) return new ModTransient().setParms (t2at(to0)) ;}
      break;
    case VOLATILE:
      to0 = jj_consume_token(VOLATILE);
     {if (true) return new ModVolatile().setParms (t2at(to0)) ;}
      break;
    case NATIVE:
      to0 = jj_consume_token(NATIVE);
     {if (true) return new ModNative().setParms (t2at(to0)) ;}
      break;
    case SYNCHRONIZED:
      to0 = jj_consume_token(SYNCHRONIZED);
     {if (true) return new ModSynchronized().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MoreAddExpr MoreAddExpr() throws ParseException {
    MoreAddExpr list = new MoreAddExpr () ;
    AdEBody ad0=null ;
    label_20:
    while (true) {
      ad0 = AdEBody();
         list.add (new MoreAddExprElem().setParms (ad0)) ;
      if (jj_2_41(2)) {
        ;
      } else {
        break label_20;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreAndExpr MoreAndExpr() throws ParseException {
    MoreAndExpr list = new MoreAndExpr () ;
    AEBody ae0=null ;
    label_21:
    while (true) {
      ae0 = AEBody();
         list.add (new MoreAndExprElem().setParms (ae0)) ;
      if (jj_2_42(2)) {
        ;
      } else {
        break label_21;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreCondAndExpr MoreCondAndExpr() throws ParseException {
    MoreCondAndExpr list = new MoreCondAndExpr () ;
    CAEBody ca0=null ;
    label_22:
    while (true) {
      ca0 = CAEBody();
         list.add (new MoreCondAndExprElem().setParms (ca0)) ;
      if (jj_2_43(2)) {
        ;
      } else {
        break label_22;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreCondOrExpr MoreCondOrExpr() throws ParseException {
    MoreCondOrExpr list = new MoreCondOrExpr () ;
    COEBody co0=null ;
    label_23:
    while (true) {
      co0 = COEBody();
         list.add (new MoreCondOrExprElem().setParms (co0)) ;
      if (jj_2_44(2)) {
        ;
      } else {
        break label_23;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreEqExpr MoreEqExpr() throws ParseException {
    MoreEqExpr list = new MoreEqExpr () ;
    EEBody ee0=null ;
    label_24:
    while (true) {
      ee0 = EEBody();
         list.add (new MoreEqExprElem().setParms (ee0)) ;
      if (jj_2_45(2)) {
        ;
      } else {
        break label_24;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreExclOrExpr MoreExclOrExpr() throws ParseException {
    MoreExclOrExpr list = new MoreExclOrExpr () ;
    EOEBody eo0=null ;
    label_25:
    while (true) {
      eo0 = EOEBody();
         list.add (new MoreExclOrExprElem().setParms (eo0)) ;
      if (jj_2_46(2)) {
        ;
      } else {
        break label_25;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreInclOrExpr MoreInclOrExpr() throws ParseException {
    MoreInclOrExpr list = new MoreInclOrExpr () ;
    IOEBody io0=null ;
    label_26:
    while (true) {
      io0 = IOEBody();
         list.add (new MoreInclOrExprElem().setParms (io0)) ;
      if (jj_2_47(2)) {
        ;
      } else {
        break label_26;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreMultExpr MoreMultExpr() throws ParseException {
    MoreMultExpr list = new MoreMultExpr () ;
    MEBody me0=null ;
    label_27:
    while (true) {
      me0 = MEBody();
         list.add (new MoreMultExprElem().setParms (me0)) ;
      if (jj_2_48(2)) {
        ;
      } else {
        break label_27;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreRelExpr MoreRelExpr() throws ParseException {
    MoreRelExpr list = new MoreRelExpr () ;
    REBody re0=null ;
    label_28:
    while (true) {
      re0 = REBody();
         list.add (new MoreRelExprElem().setParms (re0)) ;
      if (jj_2_49(2)) {
        ;
      } else {
        break label_28;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MoreShiftExpr MoreShiftExpr() throws ParseException {
    MoreShiftExpr list = new MoreShiftExpr () ;
    SEBody se0=null ;
    label_29:
    while (true) {
      se0 = SEBody();
         list.add (new MoreShiftExprElem().setParms (se0)) ;
      if (jj_2_50(2)) {
        ;
      } else {
        break label_29;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public MultExprChoices MultExprChoices() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case STAR:
      to0 = jj_consume_token(STAR);
     {if (true) return new Mult().setParms (t2at(to0)) ;}
      break;
    case SLASH:
      to0 = jj_consume_token(SLASH);
     {if (true) return new Div().setParms (t2at(to0)) ;}
      break;
    case REM:
      to0 = jj_consume_token(REM);
     {if (true) return new Mod().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
    MoreMultExpr mo0=null ;
    UnaryExpression un0=null ;
    // Merged productions from rule MultiplicativeExpression
        // (*) UnaryExpression
        // (*) UnaryExpression MoreMultExpr ::MultExpr
        // 
        un0 = UnaryExpression();
    if (jj_2_51(2)) {
      mo0 = MoreMultExpr();
         {if (true) return new MultExpr().setParms (un0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (MultiplicativeExpression) un0 ;}
    throw new Error("Missing return statement in function");
  }

  final public NestedClassDeclaration NestedClassDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    UnmodifiedClassDeclaration un0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    un0 = UnmodifiedClassDeclaration();
     {if (true) return new NClassDecl().setParms (opt(as0), un0) ;}
    throw new Error("Missing return statement in function");
  }

  final public NestedInterfaceDeclaration NestedInterfaceDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    UnmodifiedInterfaceDeclaration un0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    un0 = UnmodifiedInterfaceDeclaration();
     {if (true) return new NInterDecl().setParms (opt(as0), un0) ;}
    throw new Error("Missing return statement in function");
  }

  final public NestedSmDeclaration NestedSmDeclaration() throws ParseException {
    AST_Modifiers as0=null ;
    SmDeclaration sm0=null ;
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
      as0 = AST_Modifiers();
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    sm0 = SmDeclaration();
     {if (true) return new NSmDecl().setParms (opt(as0), sm0) ;}
    throw new Error("Missing return statement in function");
  }

  final public NoTransitionClause NoTransitionClause() throws ParseException {
    Block bl0=null ;
    Token to0=null ;
    to0 = jj_consume_token(UNRECOGNIZABLE_STATE);
    bl0 = Block();
     {if (true) return new NoTransDecl().setParms (t2at(to0), bl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public NullLiteral NullLiteral() throws ParseException {
    Token to0=null ;
    to0 = jj_consume_token(NULL);
     {if (true) return new Null().setParms (t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public OtherwiseClause OtherwiseClause() throws ParseException {
    Block bl0=null ;
    Token to0=null ;
    to0 = jj_consume_token(OTHERWISE_DEFAULT);
    bl0 = Block();
     {if (true) return new ODefaultDecl().setParms (t2at(to0), bl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public OtherwiseClauses OtherwiseClauses() throws ParseException {
    OtherwiseClauses list = new OtherwiseClauses () ;
    OtherwiseClause ot0=null ;
    label_30:
    while (true) {
      ot0 = OtherwiseClause();
         list.add (new OtherwiseClausesElem().setParms (ot0)) ;
      switch (jj_nt.kind) {
      case OTHERWISE_DEFAULT:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_30;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public PEPostIncDec PEPostIncDec() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case INCR:
      to0 = jj_consume_token(INCR);
     {if (true) return new PlusPlus2().setParms (t2at(to0)) ;}
      break;
    case DECR:
      to0 = jj_consume_token(DECR);
     {if (true) return new MinusMinus2().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PackageDeclaration PackageDeclaration() throws ParseException {
    AST_QualifiedName as0=null ;
    Token to1=null, to0=null ;
    switch (jj_nt.kind) {
    case LAYER:
      to0 = jj_consume_token(LAYER);
      as0 = AST_QualifiedName();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new AspectStm().setParms (t2at(to0), as0, t2at(to1)) ;}
      break;
    case PACKAGE:
      to0 = jj_consume_token(PACKAGE);
      as0 = AST_QualifiedName();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new PackStm().setParms (t2at(to0), as0, t2at(to1)) ;}
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
    PEPostIncDec pe0=null ;
    PrimaryExpression pr0=null ;
    // Merged productions from rule PostfixExpression
        // (*) PrimaryExpression
        // (*) PrimaryExpression PEPostIncDec ::PEIncDec
        // 
        pr0 = PrimaryExpression();
    if (jj_2_52(2)) {
      pe0 = PEPostIncDec();
         {if (true) return new PEIncDec().setParms (pr0, pe0) ;}
    } else {
      ;
    }
     {if (true) return (PostfixExpression) pr0 ;}
    throw new Error("Missing return statement in function");
  }

  final public PreDecrementExpression PreDecrementExpression() throws ParseException {
    PrimaryExpression pr0=null ;
    Token to0=null ;
    to0 = jj_consume_token(DECR);
    pr0 = PrimaryExpression();
     {if (true) return new PDecExpr().setParms (t2at(to0), pr0) ;}
    throw new Error("Missing return statement in function");
  }

  final public PreIncrementExpression PreIncrementExpression() throws ParseException {
    PrimaryExpression pr0=null ;
    Token to0=null ;
    to0 = jj_consume_token(INCR);
    pr0 = PrimaryExpression();
     {if (true) return new PIncExpr().setParms (t2at(to0), pr0) ;}
    throw new Error("Missing return statement in function");
  }

  final public PrimDot PrimDot() throws ParseException {
    PrimaryExpression pr0=null ;
    Token to0=null ;
    pr0 = PrimaryExpression();
    to0 = jj_consume_token(DOT);
     {if (true) return new PrimDotC().setParms (pr0, t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
    PrimaryPrefix pr0=null ;
    Suffixes su0=null ;
    // Merged productions from rule PrimaryExpression
        // (*) PrimaryPrefix
        // (*) PrimaryPrefix Suffixes ::PrimExpr
        // 
        pr0 = PrimaryPrefix();
    if (jj_2_53(2)) {
      su0 = Suffixes();
         {if (true) return new PrimExpr().setParms (pr0, su0) ;}
    } else {
      ;
    }
     {if (true) return (PrimaryExpression) pr0 ;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {
    AST_Exp asSs0=null ;
    AST_QualifiedName asNj0=null ;
    AST_TypeName asXv0=null ;
    AST_TypeNameList as0=null ;
    AllocationExpression al0=null ;
    Arguments ar0=null ;
    Expression ex0=null ;
    Literal li0=null ;
    QName qn0=null ;
    StringEscape st0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case PROCEED:
      to0 = jj_consume_token(PROCEED);
      ar0 = Arguments();
     {if (true) return new ProceedDecl().setParms (t2at(to0), ar0) ;}
      break;
    case 201:
      to0 = jj_consume_token(201);
      to1 = jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case TLST_ESCAPE:
      case TYP_ESCAPE:
      case IDENTIFIER:
        as0 = AST_TypeNameList();
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      to2 = jj_consume_token(RPAREN);
      to3 = jj_consume_token(DOT);
      qn0 = QName();
     {if (true) return new BasePre().setParms
    (t2at(to0), t2at(to1), opt(as0), t2at(to2), t2at(to3), qn0) ;}
      break;
    case STR_ESCAPE:
      st0 = StringEscape();
     {if (true) return (PrimaryPrefix) st0 ;}
      break;
    case EXP_ESCAPE:
      to0 = jj_consume_token(EXP_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      asSs0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new ExpEscape().setParms
    (t2at(to0), t2at(to1), asSs0, t2at(to2)) ;}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      li0 = Literal();
     {if (true) return (PrimaryPrefix) li0 ;}
      break;
    case THIS:
      to0 = jj_consume_token(THIS);
     {if (true) return new ThisPre().setParms (t2at(to0)) ;}
      break;
    case SUPER:
      to0 = jj_consume_token(SUPER);
      to1 = jj_consume_token(DOT);
      qn0 = QName();
     {if (true) return new SuperPre().setParms (t2at(to0), t2at(to1), qn0) ;}
      break;
    case LPAREN:
      to0 = jj_consume_token(LPAREN);
      ex0 = Expression();
      to1 = jj_consume_token(RPAREN);
     {if (true) return new ExprPre().setParms (t2at(to0), ex0, t2at(to1)) ;}
      break;
    case NEW:
      al0 = AllocationExpression();
     {if (true) return (PrimaryPrefix) al0 ;}
      break;
    default:
      jj_la1[94] = jj_gen;
      if (jj_2_54(2147483647)) {
        asXv0 = AST_TypeName();
        to0 = jj_consume_token(DOT);
        to1 = jj_consume_token(CLASS);
     {if (true) return new RTPre().setParms (asXv0, t2at(to0), t2at(to1)) ;}
      } else {
        switch (jj_nt.kind) {
        case ID_ESCAPE:
        case NAMEID_ESCAPE:
        case IDENTIFIER:
          asNj0 = AST_QualifiedName();
     {if (true) return new PPQualName().setParms (asNj0) ;}
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimarySuffix PrimarySuffix() throws ParseException {
    AllocationExpression al0=null ;
    Arguments ar0=null ;
    Expression ex0=null ;
    QName qn0=null ;
    Token to1=null, to0=null ;
    if (jj_2_55(2)) {
      to0 = jj_consume_token(DOT);
      to1 = jj_consume_token(THIS);
     {if (true) return new ThisSuf().setParms (t2at(to0), t2at(to1)) ;}
    } else if (jj_2_56(2)) {
      to0 = jj_consume_token(DOT);
      al0 = AllocationExpression();
     {if (true) return new AllocSuf().setParms (t2at(to0), al0) ;}
    } else {
      switch (jj_nt.kind) {
      case LBRACKET:
        to0 = jj_consume_token(LBRACKET);
        ex0 = Expression();
        to1 = jj_consume_token(RBRACKET);
     {if (true) return new ExprSuf().setParms (t2at(to0), ex0, t2at(to1)) ;}
        break;
      case DOT:
        to0 = jj_consume_token(DOT);
        qn0 = QName();
     {if (true) return new QNameSuf().setParms (t2at(to0), qn0) ;}
        break;
      case LPAREN:
        ar0 = Arguments();
     {if (true) return new MthCall().setParms (ar0) ;}
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case BOOLEAN:
      to0 = jj_consume_token(BOOLEAN);
     {if (true) return new BoolTyp().setParms (t2at(to0)) ;}
      break;
    case CHAR:
      to0 = jj_consume_token(CHAR);
     {if (true) return new CharTyp().setParms (t2at(to0)) ;}
      break;
    case BYTE:
      to0 = jj_consume_token(BYTE);
     {if (true) return new ByteTyp().setParms (t2at(to0)) ;}
      break;
    case SHORT:
      to0 = jj_consume_token(SHORT);
     {if (true) return new ShortTyp().setParms (t2at(to0)) ;}
      break;
    case INT:
      to0 = jj_consume_token(INT);
     {if (true) return new IntTyp().setParms (t2at(to0)) ;}
      break;
    case LONG:
      to0 = jj_consume_token(LONG);
     {if (true) return new LongTyp().setParms (t2at(to0)) ;}
      break;
    case FLOAT:
      to0 = jj_consume_token(FLOAT);
     {if (true) return new FloatTyp().setParms (t2at(to0)) ;}
      break;
    case DOUBLE:
      to0 = jj_consume_token(DOUBLE);
     {if (true) return new DoubleTyp().setParms (t2at(to0)) ;}
      break;
    case VOID:
      to0 = jj_consume_token(VOID);
     {if (true) return new VoidTyp().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public QName QName() throws ParseException {
    AST_Exp as0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case ID_ESCAPE:
      to0 = jj_consume_token(ID_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new IdEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case NAMEID_ESCAPE:
      to0 = jj_consume_token(NAMEID_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new NameIdEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case IDENTIFIER:
      to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new NameId().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public QNameList QNameList() throws ParseException {
    QNameList list = new QNameList () ;
    QName qn0=null ;
    Token to0=null ;
    qn0 = QName();
     list.add (new QNameListElem().setParms (qn0)) ;
    label_31:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_31;
      }
      to0 = jj_consume_token(COMMA);
      qn0 = QName();
         list.add (new QNameListElem().setParms (t2at(to0), qn0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public REBody REBody() throws ParseException {
    RelExprChoices re0=null ;
    ShiftExpression sh0=null ;
    re0 = RelExprChoices();
    sh0 = ShiftExpression();
     {if (true) return new REBod().setParms (re0, sh0) ;}
    throw new Error("Missing return statement in function");
  }

  final public RelExprChoices RelExprChoices() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case LT:
      to0 = jj_consume_token(LT);
     {if (true) return new LtOp().setParms (t2at(to0)) ;}
      break;
    case GT:
      to0 = jj_consume_token(GT);
     {if (true) return new GtOp().setParms (t2at(to0)) ;}
      break;
    case LE:
      to0 = jj_consume_token(LE);
     {if (true) return new LeOp().setParms (t2at(to0)) ;}
      break;
    case GE:
      to0 = jj_consume_token(GE);
     {if (true) return new GeOp().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
    MoreRelExpr mo0=null ;
    ShiftExpression sh0=null ;
    // Merged productions from rule RelationalExpression
        // (*) ShiftExpression
        // (*) ShiftExpression MoreRelExpr ::RelExpr
        // 
        sh0 = ShiftExpression();
    if (jj_2_57(2)) {
      mo0 = MoreRelExpr();
         {if (true) return new RelExpr().setParms (sh0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (RelationalExpression) sh0 ;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
    Expression ex0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(RETURN);
    switch (jj_nt.kind) {
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case AI_BEGIN:
    case CASE_BEGIN:
    case CAT_BEGIN:
    case CLS_BEGIN:
    case ESTM_BEGIN:
    case EXP_BEGIN:
    case EXP_ESCAPE:
    case ID_BEGIN:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IMP_BEGIN:
    case MOD_BEGIN:
    case MTH_BEGIN:
    case PLST_BEGIN:
    case PRG_BEGIN:
    case STM_BEGIN:
    case STR_ESCAPE:
    case TLST_BEGIN:
    case TYP_BEGIN:
    case TYP_ESCAPE:
    case VI_BEGIN:
    case VLST_BEGIN:
    case XLST_BEGIN:
    case XLST_ESCAPE:
    case 201:
    case IDENTIFIER:
      ex0 = Expression();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ReturnStm().setParms (t2at(to0), opt(ex0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public RootClause RootClause() throws ParseException {
    DelivClause de0=null ;
    NoTransitionClause no0=null ;
    de0 = DelivClause();
    switch (jj_nt.kind) {
    case UNRECOGNIZABLE_STATE:
      no0 = NoTransitionClause();
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
     {if (true) return new RootDecl().setParms (de0, opt(no0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public SEBody SEBody() throws ParseException {
    AdditiveExpression ad0=null ;
    ShiftExprChoices sh0=null ;
    sh0 = ShiftExprChoices();
    ad0 = AdditiveExpression();
     {if (true) return new SEBodyC().setParms (sh0, ad0) ;}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExprChoices ShiftExprChoices() throws ParseException {
    Token to0=null ;
    switch (jj_nt.kind) {
    case LSHIFT:
      to0 = jj_consume_token(LSHIFT);
     {if (true) return new LShift().setParms (t2at(to0)) ;}
      break;
    case RSIGNEDSHIFT:
      to0 = jj_consume_token(RSIGNEDSHIFT);
     {if (true) return new RShift().setParms (t2at(to0)) ;}
      break;
    case RUNSIGNEDSHIFT:
      to0 = jj_consume_token(RUNSIGNEDSHIFT);
     {if (true) return new RRShift().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
    AdditiveExpression ad0=null ;
    MoreShiftExpr mo0=null ;
    // Merged productions from rule ShiftExpression
        // (*) AdditiveExpression
        // (*) AdditiveExpression MoreShiftExpr ::ShiftExpr
        // 
        ad0 = AdditiveExpression();
    if (jj_2_58(2)) {
      mo0 = MoreShiftExpr();
         {if (true) return new ShiftExpr().setParms (ad0, mo0) ;}
    } else {
      ;
    }
     {if (true) return (ShiftExpression) ad0 ;}
    throw new Error("Missing return statement in function");
  }

  final public SmClassBody SmClassBody() throws ParseException {
    AST_FieldDecl as0=null ;
    ESList es0=null ;
    OtherwiseClauses ot0=null ;
    RootClause ro0=null ;
    StatesList st0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case DELIVERY:
      ro0 = RootClause();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case OTHERWISE_DEFAULT:
      ot0 = OtherwiseClauses();
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case NESTED_STATE:
    case STATES:
      st0 = StatesList();
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case EDGE:
    case EDGEACTION:
    case EDGETEST:
    case ENTER:
    case EXIT:
    case OTHERWISE:
    case PREPARE:
      es0 = ESList();
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case STATE_MACHINE:
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case LBRACE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case MOD_ESCAPE:
    case MTH_ESCAPE:
    case TYP_ESCAPE:
    case ENVIRONMENT:
    case OVERRIDES:
    case REFINES:
    case IDENTIFIER:
      as0 = AST_FieldDecl();
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    to1 = jj_consume_token(RBRACE);
     {if (true) return new SmClassDecl().setParms
    (t2at(to0), opt(ro0), opt(ot0), opt(st0), opt(es0), opt(as0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public SmDeclaration SmDeclaration() throws ParseException {
    ImplementsClause im0=null ;
    QName qn0=null ;
    SmClassBody smSs0=null ;
    SmExtendsClause sm0=null ;
    Token to0=null ;
    to0 = jj_consume_token(STATE_MACHINE);
    qn0 = QName();
    switch (jj_nt.kind) {
    case EXTENDS:
      sm0 = SmExtendsClause();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IMPLEMENTS:
      im0 = ImplementsClause();
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    smSs0 = SmClassBody();
     {if (true) return new UmodSmDecl().setParms
    (t2at(to0), qn0, opt(sm0), opt(im0), smSs0) ;}
    throw new Error("Missing return statement in function");
  }

  final public SmExtendsClause SmExtendsClause() throws ParseException {
    AST_QualifiedName as0=null ;
    ExtendsClause ex0=null ;
    Token to1=null, to0=null ;
    if (jj_2_59(2)) {
      ex0 = ExtendsClause();
     {if (true) return new SmExtends().setParms (ex0) ;}
    } else if (jj_2_60(2)) {
      to0 = jj_consume_token(EXTENDS);
      to1 = jj_consume_token(CLASS);
      as0 = AST_QualifiedName();
     {if (true) return new SmClsExtends().setParms (t2at(to0), t2at(to1), as0) ;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StartName StartName() throws ParseException {
    QName qn0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IDENTIFIER:
      qn0 = QName();
     {if (true) return new SmSName().setParms (qn0) ;}
      break;
    case STAR:
      to0 = jj_consume_token(STAR);
     {if (true) return new StarName().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
    AST_Exp as0=null ;
    Arguments ar0=null ;
    Block bl0=null ;
    BreakStatement br0=null ;
    ContinueStatement co0=null ;
    DoStatement do0=null ;
    EmptyStatement em0=null ;
    ForStatement fo0=null ;
    IfStatement if0=null ;
    LabeledStatement la0=null ;
    QName qn0=null ;
    ReturnStatement re0=null ;
    SwitchStatement sw0=null ;
    SynchronizedStatement sy0=null ;
    ThrowStatement th0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    TryStatement tr0=null ;
    WhileStatement wh0=null ;
    switch (jj_nt.kind) {
    case GOTO_STATE:
      to0 = jj_consume_token(GOTO_STATE);
      qn0 = QName();
      ar0 = Arguments();
     {if (true) return new GotoState().setParms (t2at(to0), qn0, ar0) ;}
      break;
    case ALIAS:
      to0 = jj_consume_token(ALIAS);
      to1 = jj_consume_token(LPAREN);
      qn0 = QName();
      to2 = jj_consume_token(COMMA);
      as0 = AST_Exp();
      to3 = jj_consume_token(RPAREN);
      to4 = jj_consume_token(SEMICOLON);
     {if (true) return new Alias().setParms
    (t2at(to0), t2at(to1), qn0, t2at(to2), as0, t2at(to3), t2at(to4)) ;}
      break;
    default:
      jj_la1[112] = jj_gen;
      if (jj_2_61(2)) {
        to0 = jj_consume_token(ENVIRONMENT);
        to1 = jj_consume_token(AUGMENT);
        as0 = AST_Exp();
        to2 = jj_consume_token(SEMICOLON);
     {if (true) return new Augment().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      } else {
        switch (jj_nt.kind) {
        case ENVIRONMENT:
          to0 = jj_consume_token(ENVIRONMENT);
          to1 = jj_consume_token(PARENT);
          as0 = AST_Exp();
          to2 = jj_consume_token(SEMICOLON);
     {if (true) return new SetParent().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
          break;
        case STM_ESCAPE:
          to0 = jj_consume_token(STM_ESCAPE);
          to1 = jj_consume_token(LPAREN);
          as0 = AST_Exp();
          to2 = jj_consume_token(RPAREN);
          to3 = jj_consume_token(SEMICOLON);
     {if (true) return new StmEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2), t2at(to3)) ;}
          break;
        default:
          jj_la1[113] = jj_gen;
          if (jj_2_62(2147483647)) {
            la0 = LabeledStatement();
     {if (true) return (Statement) la0 ;}
          } else {
            switch (jj_nt.kind) {
            case LBRACE:
              bl0 = Block();
     {if (true) return (Statement) bl0 ;}
              break;
            case SEMICOLON:
              em0 = EmptyStatement();
     {if (true) return (Statement) em0 ;}
              break;
            case SWITCH:
              sw0 = SwitchStatement();
     {if (true) return (Statement) sw0 ;}
              break;
            case IF:
              if0 = IfStatement();
     {if (true) return (Statement) if0 ;}
              break;
            case WHILE:
              wh0 = WhileStatement();
     {if (true) return (Statement) wh0 ;}
              break;
            case DO:
              do0 = DoStatement();
     {if (true) return (Statement) do0 ;}
              break;
            case FOR:
              fo0 = ForStatement();
     {if (true) return (Statement) fo0 ;}
              break;
            case BREAK:
              br0 = BreakStatement();
     {if (true) return (Statement) br0 ;}
              break;
            case CONTINUE:
              co0 = ContinueStatement();
     {if (true) return (Statement) co0 ;}
              break;
            case RETURN:
              re0 = ReturnStatement();
     {if (true) return (Statement) re0 ;}
              break;
            case THROW:
              th0 = ThrowStatement();
     {if (true) return (Statement) th0 ;}
              break;
            case SYNCHRONIZED:
              sy0 = SynchronizedStatement();
     {if (true) return (Statement) sy0 ;}
              break;
            case TRY:
              tr0 = TryStatement();
     {if (true) return (Statement) tr0 ;}
              break;
            case LPAREN:
            case PROCEED:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case AI_BEGIN:
            case CASE_BEGIN:
            case CAT_BEGIN:
            case CLS_BEGIN:
            case ESTM_BEGIN:
            case EXP_BEGIN:
            case EXP_ESCAPE:
            case ID_BEGIN:
            case ID_ESCAPE:
            case NAMEID_ESCAPE:
            case IMP_BEGIN:
            case MOD_BEGIN:
            case MTH_BEGIN:
            case PLST_BEGIN:
            case PRG_BEGIN:
            case STM_BEGIN:
            case STR_ESCAPE:
            case TLST_BEGIN:
            case TYP_BEGIN:
            case TYP_ESCAPE:
            case VI_BEGIN:
            case VLST_BEGIN:
            case XLST_BEGIN:
            case XLST_ESCAPE:
            case 201:
            case IDENTIFIER:
              as0 = AST_Exp();
              to0 = jj_consume_token(SEMICOLON);
     {if (true) return new ExprStmt().setParms (as0, t2at(to0)) ;}
              break;
            default:
              jj_la1[114] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementExpression StatementExpression() throws ParseException {
    AST_Exp as0=null ;
    PreDecrementExpression prSs0=null ;
    PreIncrementExpression pr0=null ;
    PrimaryExpression prXv0=null ;
    StmtExprChoices st0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case ESTM_ESCAPE:
      to0 = jj_consume_token(ESTM_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new EstmEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case INCR:
      pr0 = PreIncrementExpression();
     {if (true) return new PIExpr().setParms (pr0) ;}
      break;
    case DECR:
      prSs0 = PreDecrementExpression();
     {if (true) return new PDExpr().setParms (prSs0) ;}
      break;
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case EXP_ESCAPE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case STR_ESCAPE:
    case TYP_ESCAPE:
    case 201:
    case IDENTIFIER:
      prXv0 = PrimaryExpression();
      switch (jj_nt.kind) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        st0 = StmtExprChoices();
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
     {if (true) return new PEStmtExpr().setParms (prXv0, opt(st0)) ;}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementExpressionList StatementExpressionList() throws ParseException {
    StatementExpressionList list = new StatementExpressionList () ;
    StatementExpression st0=null ;
    Token to0=null ;
    st0 = StatementExpression();
     list.add (new StatementExpressionListElem().setParms (st0)) ;
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_32;
      }
      to0 = jj_consume_token(COMMA);
      st0 = StatementExpression();
         list.add (new
        StatementExpressionListElem().setParms (t2at(to0), st0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public StatesClause StatesClause() throws ParseException {
    AST_TypeNameList as0=null ;
    AllocationExpression al0=null ;
    QName qn0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case STATES:
      to0 = jj_consume_token(STATES);
      as0 = AST_TypeNameList();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new StatesDecl().setParms (t2at(to0), as0, t2at(to1)) ;}
      break;
    case NESTED_STATE:
      to0 = jj_consume_token(NESTED_STATE);
      qn0 = QName();
      to1 = jj_consume_token(COLON);
      al0 = AllocationExpression();
      to2 = jj_consume_token(SEMICOLON);
     {if (true) return new NStateDecl().setParms
    (t2at(to0), qn0, t2at(to1), al0, t2at(to2)) ;}
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatesList StatesList() throws ParseException {
    StatesList list = new StatesList () ;
    StatesClause st0=null ;
    label_33:
    while (true) {
      st0 = StatesClause();
         list.add (new StatesListElem().setParms (st0)) ;
      switch (jj_nt.kind) {
      case NESTED_STATE:
      case STATES:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_33;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public StmtExprChoices StmtExprChoices() throws ParseException {
    AssignmentOperator as0=null ;
    Expression ex0=null ;
    Token to0=null ;
    switch (jj_nt.kind) {
    case INCR:
      to0 = jj_consume_token(INCR);
     {if (true) return new PlusPlus().setParms (t2at(to0)) ;}
      break;
    case DECR:
      to0 = jj_consume_token(DECR);
     {if (true) return new MinusMinus().setParms (t2at(to0)) ;}
      break;
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      as0 = AssignmentOperator();
      ex0 = Expression();
     {if (true) return new AssnExpr().setParms (as0, ex0) ;}
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StringEscape StringEscape() throws ParseException {
    AST_Exp as0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(STR_ESCAPE);
    to1 = jj_consume_token(LPAREN);
    as0 = AST_Exp();
    to2 = jj_consume_token(RPAREN);
     {if (true) return new StrEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  final public Suffixes Suffixes() throws ParseException {
    Suffixes list = new Suffixes () ;
    PrimarySuffix pr0=null ;
    label_34:
    while (true) {
      pr0 = PrimarySuffix();
         list.add (new SuffixesElem().setParms (pr0)) ;
      if (jj_2_63(2)) {
        ;
      } else {
        break label_34;
      }
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchEntryBody SwitchEntryBody() throws ParseException {
    AST_Exp as0=null ;
    AST_Stmt asSs0=null ;
    SwitchLabel sw0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case CASE_ESCAPE:
      to0 = jj_consume_token(CASE_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new SwEscape().setParms (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case CASE:
    case _DEFAULT:
      sw0 = SwitchLabel();
      switch (jj_nt.kind) {
      case GOTO_STATE:
      case LPAREN:
      case PROCEED:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case AI_BEGIN:
      case CASE_BEGIN:
      case CAT_BEGIN:
      case CLS_BEGIN:
      case ESTM_BEGIN:
      case EXP_BEGIN:
      case EXP_ESCAPE:
      case ID_BEGIN:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case IMP_BEGIN:
      case MOD_BEGIN:
      case MTH_BEGIN:
      case PLST_BEGIN:
      case PRG_BEGIN:
      case STM_BEGIN:
      case STM_ESCAPE:
      case STR_ESCAPE:
      case TLST_BEGIN:
      case TYP_BEGIN:
      case TYP_ESCAPE:
      case VI_BEGIN:
      case VLST_BEGIN:
      case XLST_BEGIN:
      case XLST_ESCAPE:
      case ALIAS:
      case ENVIRONMENT:
      case 201:
      case IDENTIFIER:
        asSs0 = AST_Stmt();
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
     {if (true) return new SEBod().setParms (sw0, opt(asSs0)) ;}
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SwitchLabel SwitchLabel() throws ParseException {
    Expression ex0=null ;
    Token to1=null, to0=null ;
    switch (jj_nt.kind) {
    case CASE:
      to0 = jj_consume_token(CASE);
      ex0 = Expression();
      to1 = jj_consume_token(COLON);
     {if (true) return new CaseLabel().setParms (t2at(to0), ex0, t2at(to1)) ;}
      break;
    case _DEFAULT:
      to0 = jj_consume_token(_DEFAULT);
      to1 = jj_consume_token(COLON);
     {if (true) return new DefLabel().setParms (t2at(to0), t2at(to1)) ;}
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
    AST_SwitchEntry as0=null ;
    Expression ex0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(SWITCH);
    to1 = jj_consume_token(LPAREN);
    ex0 = Expression();
    to2 = jj_consume_token(RPAREN);
    to3 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case CASE:
    case _DEFAULT:
    case CASE_ESCAPE:
      as0 = AST_SwitchEntry();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    to4 = jj_consume_token(RBRACE);
     {if (true) return new SwitchStmt().setParms
    (t2at(to0), t2at(to1), ex0, t2at(to2), t2at(to3), opt(as0), t2at(to4)) ;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {
    Block bl0=null ;
    Expression ex0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(SYNCHRONIZED);
    to1 = jj_consume_token(LPAREN);
    ex0 = Expression();
    to2 = jj_consume_token(RPAREN);
    bl0 = Block();
     {if (true) return new SyncStmt().setParms
    (t2at(to0), t2at(to1), ex0, t2at(to2), bl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public TName TName() throws ParseException {
    AST_Exp as0=null ;
    AST_TypeName asSs0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case TLST_ESCAPE:
      to0 = jj_consume_token(TLST_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new TlstEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case TYP_ESCAPE:
    case IDENTIFIER:
      asSs0 = AST_TypeName();
     {if (true) return new TNClass().setParms (asSs0) ;}
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
    Expression ex0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(THROW);
    ex0 = Expression();
    to1 = jj_consume_token(SEMICOLON);
     {if (true) return new ThrowStm().setParms (t2at(to0), ex0, t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowsClause ThrowsClause() throws ParseException {
    AST_TypeNameList as0=null ;
    Token to0=null ;
    to0 = jj_consume_token(THROWS);
    as0 = AST_TypeNameList();
     {if (true) return new ThrowsClauseC().setParms (t2at(to0), as0) ;}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
    AST_Catches as0=null ;
    Block bl0=null ;
    Finally fi0=null ;
    Token to0=null ;
    to0 = jj_consume_token(TRY);
    bl0 = Block();
    switch (jj_nt.kind) {
    case CATCH:
    case CAT_ESCAPE:
      as0 = AST_Catches();
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FINALLY:
      fi0 = Finally();
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
     {if (true) return new TryStmt().setParms (t2at(to0), bl0, opt(as0), opt(fi0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {
    AST_Exp asSs0=null ;
    AST_Modifiers asXv0=null ;
    AST_QualifiedName as0=null ;
    QNameList qn0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    UnmodifiedTypeDeclaration un0=null ;
    switch (jj_nt.kind) {
    case 203:
      to0 = jj_consume_token(203);
      qn0 = QNameList();
      to1 = jj_consume_token(SEMICOLON);
     {if (true) return new LocalIdProd().setParms (t2at(to0), qn0, t2at(to1)) ;}
      break;
    case SOURCE:
      to0 = jj_consume_token(SOURCE);
      switch (jj_nt.kind) {
      case ROOT:
        to1 = jj_consume_token(ROOT);
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      as0 = AST_QualifiedName();
      to2 = jj_consume_token(STRING_LITERAL);
      to3 = jj_consume_token(SEMICOLON);
     {if (true) return new SourceDecl().setParms
    (t2at(to0), opt(t2at(to1)), as0, t2at(to2), t2at(to3)) ;}
      break;
    case CLS_ESCAPE:
      to0 = jj_consume_token(CLS_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      asSs0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new ClsEscape().setParms
    (t2at(to0), t2at(to1), asSs0, t2at(to2)) ;}
      break;
    case IDENTIFIER:
      to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new ClsIscape().setParms (t2at(to0)) ;}
      break;
    case STATE_MACHINE:
    case ABSTRACT:
    case CLASS:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case MOD_ESCAPE:
    case OVERRIDES:
    case REFINES:
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case MOD_ESCAPE:
      case OVERRIDES:
        asXv0 = AST_Modifiers();
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      un0 = UnmodifiedTypeDeclaration();
     {if (true) return new ModTypeDecl().setParms (opt(asXv0), un0) ;}
      break;
    case SEMICOLON:
      to0 = jj_consume_token(SEMICOLON);
     {if (true) return new EmptyTDecl().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
    PreDecrementExpression prSs0=null ;
    PreIncrementExpression pr0=null ;
    Token to0=null ;
    UnaryExpression un0=null ;
    UnaryExpressionNotPlusMinus unXv0=null ;
    switch (jj_nt.kind) {
    case PLUS:
      to0 = jj_consume_token(PLUS);
      un0 = UnaryExpression();
     {if (true) return new PlusUE().setParms (t2at(to0), un0) ;}
      break;
    case MINUS:
      to0 = jj_consume_token(MINUS);
      un0 = UnaryExpression();
     {if (true) return new MinusUE().setParms (t2at(to0), un0) ;}
      break;
    case INCR:
      pr0 = PreIncrementExpression();
     {if (true) return (UnaryExpression) pr0 ;}
      break;
    case DECR:
      prSs0 = PreDecrementExpression();
     {if (true) return (UnaryExpression) prSs0 ;}
      break;
    case LPAREN:
    case PROCEED:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case BANG:
    case TILDE:
    case EXP_ESCAPE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case STR_ESCAPE:
    case TYP_ESCAPE:
    case 201:
    case IDENTIFIER:
      unXv0 = UnaryExpressionNotPlusMinus();
     {if (true) return (UnaryExpression) unXv0 ;}
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
    CastExpression ca0=null ;
    PostfixExpression po0=null ;
    Token to0=null ;
    UnaryExpression un0=null ;
    switch (jj_nt.kind) {
    case TILDE:
      to0 = jj_consume_token(TILDE);
      un0 = UnaryExpression();
     {if (true) return new TildeUE().setParms (t2at(to0), un0) ;}
      break;
    case BANG:
      to0 = jj_consume_token(BANG);
      un0 = UnaryExpression();
     {if (true) return new NotUE().setParms (t2at(to0), un0) ;}
      break;
    default:
      jj_la1[132] = jj_gen;
      if (jj_2_64(2147483647)) {
        ca0 = CastExpression();
     {if (true) return (UnaryExpressionNotPlusMinus) ca0 ;}
      } else {
        switch (jj_nt.kind) {
        case LPAREN:
        case PROCEED:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case EXP_ESCAPE:
        case ID_ESCAPE:
        case NAMEID_ESCAPE:
        case STR_ESCAPE:
        case TYP_ESCAPE:
        case 201:
        case IDENTIFIER:
          po0 = PostfixExpression();
     {if (true) return (UnaryExpressionNotPlusMinus) po0 ;}
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UnmodifiedClassDeclaration UnmodifiedClassDeclaration() throws ParseException {
    ClassBody cl0=null ;
    ExtendsClause ex0=null ;
    ImplementsClause im0=null ;
    QName qn0=null ;
    Token to0=null ;
    to0 = jj_consume_token(CLASS);
    qn0 = QName();
    switch (jj_nt.kind) {
    case EXTENDS:
      ex0 = ExtendsClause();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IMPLEMENTS:
      im0 = ImplementsClause();
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    cl0 = ClassBody();
     {if (true) return new UmodClassDecl().setParms
    (t2at(to0), qn0, opt(ex0), opt(im0), cl0) ;}
    throw new Error("Missing return statement in function");
  }

  final public UnmodifiedInterfaceDeclaration UnmodifiedInterfaceDeclaration() throws ParseException {
    IntExtClause in0=null ;
    InterfaceMemberDeclarations inSs0=null ;
    QName qn0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(INTERFACE);
    qn0 = QName();
    switch (jj_nt.kind) {
    case EXTENDS:
      in0 = IntExtClause();
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    to1 = jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case NEW:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case MOD_ESCAPE:
    case TYP_ESCAPE:
    case ENVIRONMENT:
    case OVERRIDES:
    case IDENTIFIER:
      inSs0 = InterfaceMemberDeclarations();
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    to2 = jj_consume_token(RBRACE);
     {if (true) return new UmInterDecl().setParms
    (t2at(to0), qn0, opt(in0), t2at(to1), opt(inSs0), t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  final public UnmodifiedTypeDeclaration UnmodifiedTypeDeclaration() throws ParseException {
    SmDeclaration sm0=null ;
    Token to0=null ;
    UnmodifiedClassDeclaration unSs0=null ;
    UnmodifiedInterfaceDeclaration unXv0=null ;
    UnmodifiedTypeExtension un0=null ;
    switch (jj_nt.kind) {
    case STATE_MACHINE:
      sm0 = SmDeclaration();
     {if (true) return (UnmodifiedTypeDeclaration) sm0 ;}
      break;
    case REFINES:
      to0 = jj_consume_token(REFINES);
      un0 = UnmodifiedTypeExtension();
     {if (true) return new Ute().setParms (t2at(to0), un0) ;}
      break;
    case CLASS:
      unSs0 = UnmodifiedClassDeclaration();
     {if (true) return (UnmodifiedTypeDeclaration) unSs0 ;}
      break;
    case INTERFACE:
      unXv0 = UnmodifiedInterfaceDeclaration();
     {if (true) return (UnmodifiedTypeDeclaration) unXv0 ;}
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnmodifiedTypeExtension UnmodifiedTypeExtension() throws ParseException {
    ClassBody cl0=null ;
    ImplementsClause im0=null ;
    IntExtClause in0=null ;
    InterfaceMemberDeclarations inSs0=null ;
    QName qn0=null ;
    SmClassBody sm0=null ;
    Token to2=null, to1=null, to0=null ;
    switch (jj_nt.kind) {
    case STATE_MACHINE:
      to0 = jj_consume_token(STATE_MACHINE);
      qn0 = QName();
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        im0 = ImplementsClause();
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      sm0 = SmClassBody();
     {if (true) return new UmodSmExt().setParms (t2at(to0), qn0, opt(im0), sm0) ;}
      break;
    case INTERFACE:
      to0 = jj_consume_token(INTERFACE);
      qn0 = QName();
      switch (jj_nt.kind) {
      case EXTENDS:
        in0 = IntExtClause();
        break;
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      to1 = jj_consume_token(LBRACE);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case ID_ESCAPE:
      case NAMEID_ESCAPE:
      case MOD_ESCAPE:
      case TYP_ESCAPE:
      case ENVIRONMENT:
      case OVERRIDES:
      case IDENTIFIER:
        inSs0 = InterfaceMemberDeclarations();
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      to2 = jj_consume_token(RBRACE);
     {if (true) return new UmodIntExt().setParms
    (t2at(to0), qn0, opt(in0), t2at(to1), opt(inSs0), t2at(to2)) ;}
      break;
    case CLASS:
      to0 = jj_consume_token(CLASS);
      qn0 = QName();
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        im0 = ImplementsClause();
        break;
      default:
        jj_la1[142] = jj_gen;
        ;
      }
      cl0 = ClassBody();
     {if (true) return new UmodClassExt().setParms (t2at(to0), qn0, opt(im0), cl0) ;}
      break;
    case REFINES:
      to0 = jj_consume_token(REFINES);
     {if (true) return new UTEError().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarAssign VarAssign() throws ParseException {
    AST_VarInit as0=null ;
    Token to0=null ;
    to0 = jj_consume_token(ASSIGN);
    as0 = AST_VarInit();
     {if (true) return new VarAssignC().setParms (t2at(to0), as0) ;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
    AST_Exp as0=null ;
    Token to2=null, to1=null, to0=null ;
    VarAssign vaSs0=null ;
    VariableDeclaratorId va0=null ;
    switch (jj_nt.kind) {
    case VLST_ESCAPE:
      to0 = jj_consume_token(VLST_ESCAPE);
      to1 = jj_consume_token(LPAREN);
      as0 = AST_Exp();
      to2 = jj_consume_token(RPAREN);
     {if (true) return new VlstEscape().setParms
    (t2at(to0), t2at(to1), as0, t2at(to2)) ;}
      break;
    case ID_ESCAPE:
    case NAMEID_ESCAPE:
    case IDENTIFIER:
      va0 = VariableDeclaratorId();
      switch (jj_nt.kind) {
      case ASSIGN:
        vaSs0 = VarAssign();
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
     {if (true) return new VarDecl().setParms (va0, opt(vaSs0)) ;}
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
    Dims di0=null ;
    QName qn0=null ;
    qn0 = QName();
    switch (jj_nt.kind) {
    case LBRACKET:
      di0 = Dims();
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
     {if (true) return new DecNameDim().setParms (qn0, opt(di0)) ;}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
    Expression ex0=null ;
    Statement st0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(WHILE);
    to1 = jj_consume_token(LPAREN);
    ex0 = Expression();
    to2 = jj_consume_token(RPAREN);
    st0 = Statement();
     {if (true) return new WhileStm().setParms
    (t2at(to0), t2at(to1), ex0, t2at(to2), st0) ;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_3R_474()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_436() {
    Token xsp;
    if (jj_3R_458()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_458()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_490() {
    if (jj_3R_398()) return true;
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_489() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3R_474() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) {
    jj_scanpos = xsp;
    if (jj_3R_489()) {
    jj_scanpos = xsp;
    if (jj_3R_490()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_134()) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_428()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(NAMEID_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_453()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(ID_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_131()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_scan_token(VLST_ESCAPE)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_3R_433()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_263()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_263()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(IMP_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_360() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) return true;
    }
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_384()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_3R_470()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_361()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_264()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_449()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(VLST_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    if (jj_scan_token(REFINES)) return true;
    return false;
  }

  private boolean jj_3R_359() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_483() {
    if (jj_3R_434()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_483()) jj_scanpos = xsp;
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(PLST_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_3R_435()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_481()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_482()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_480() {
    if (jj_3R_434()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(EXP_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_3R_486()) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_scan_token(STATE_MACHINE)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_480()) jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    return false;
  }

  private boolean jj_3R_447() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_466()) {
    jj_scanpos = xsp;
    if (jj_3R_467()) {
    jj_scanpos = xsp;
    if (jj_3R_468()) {
    jj_scanpos = xsp;
    if (jj_3R_469()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_36()) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_452() {
    if (jj_3R_472()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(201)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_471()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(PROCEED)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_450()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_451()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_452()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_scan_token(REFINES)) return true;
    if (jj_3R_447()) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_412()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_3R_486()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_471() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_484()) {
    jj_scanpos = xsp;
    if (jj_3R_485()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_125()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_3R_435()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_152()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_410()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_331()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_3R_434()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_108()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_427() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_446()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_3R_279()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_3R_465()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_scan_token(ENVIRONMENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_445()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) return true;
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    }
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_61()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    if (jj_3_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(LAYER)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_335() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_123()) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_493() {
    if (jj_3R_498()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_400()) jj_scanpos = xsp;
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_476() {
    Token xsp;
    if (jj_3R_493()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_493()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(201)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(CLS_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(VI_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_498() {
    if (jj_scan_token(OTHERWISE_DEFAULT)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_scan_token(SOURCE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(199)) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(203)) return true;
    if (jj_3R_399()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_130()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_310()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_497() {
    if (jj_scan_token(UNRECOGNIZABLE_STATE)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_3R_473()) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_456()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_509() {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_508() {
    if (jj_scan_token(EDGE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_510()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(CONDITION)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(TYP_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_507() {
    if (jj_scan_token(EDGEACTION)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_332()) return true;
    return false;
  }

  private boolean jj_3R_506() {
    if (jj_scan_token(EDGETEST)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(TLST_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    Token xsp;
    if (jj_3R_302()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_505() {
    if (jj_scan_token(PREPARE)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_504() {
    if (jj_scan_token(ENTER)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_503() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_500() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) {
    jj_scanpos = xsp;
    if (jj_3R_504()) {
    jj_scanpos = xsp;
    if (jj_3R_505()) {
    jj_scanpos = xsp;
    if (jj_3R_506()) {
    jj_scanpos = xsp;
    if (jj_3R_507()) {
    jj_scanpos = xsp;
    if (jj_3R_508()) {
    jj_scanpos = xsp;
    if (jj_3R_509()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    if (jj_3R_219()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    if (jj_3_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_129()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_448()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    if (jj_3_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_336()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_337()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) return true;
    }
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    if (jj_3_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_366()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    if (jj_3R_147()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_470() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(CASE_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    if (jj_3_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_495() {
    if (jj_3R_500()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    Token xsp;
    if (jj_3R_338()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_338()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_478() {
    Token xsp;
    if (jj_3R_495()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_495()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    if (jj_3_46()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    if (jj_3_63()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_303() {
    Token xsp;
    if (jj_3R_333()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    if (jj_3_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(STR_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_128()) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_314()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_315()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_61()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    if (jj_3_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_354()) return true;
    return false;
  }

  private boolean jj_3R_494() {
    if (jj_3R_499()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    if (jj_3_43()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    if (jj_3R_334()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_264()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_477() {
    Token xsp;
    if (jj_3R_494()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_494()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_316() {
    Token xsp;
    if (jj_3R_347()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_502() {
    if (jj_scan_token(NESTED_STATE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_501() {
    if (jj_scan_token(STATES)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_499() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_501()) {
    jj_scanpos = xsp;
    if (jj_3R_502()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    if (jj_3_41()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(AI_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    return false;
  }

  private boolean jj_3R_496() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_491() {
    if (jj_scan_token(DELIVERY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_308()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_486() {
    if (jj_3R_314()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_496()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_479()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(ESTM_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_454()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(MOD_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(OVERRIDES)) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(REFINES)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_442()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_421() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_418()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_319()) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_422()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_3R_423()) return true;
    xsp = jj_scanpos;
    if (jj_3R_424()) jj_scanpos = xsp;
    if (jj_3R_425()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(STM_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) return true;
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(ENVIRONMENT)) return true;
    if (jj_scan_token(PARENT)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_132()) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_179()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(ENVIRONMENT)) return true;
    if (jj_scan_token(AUGMENT)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(ALIAS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(XLST_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(GOTO_STATE)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_512() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_511() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_510() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_511()) {
    jj_scanpos = xsp;
    if (jj_3R_512()) return true;
    }
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_398()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_396()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(CAT_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    if (jj_scan_token(CAT_END)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_459() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(ESTM_BEGIN)) return true;
    if (jj_3R_281()) return true;
    if (jj_scan_token(ESTM_END)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(AI_BEGIN)) return true;
    if (jj_3R_280()) return true;
    if (jj_scan_token(AI_END)) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_434()) return true;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_3R_459()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_scan_token(MTH_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(VI_BEGIN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(VI_END)) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(202)) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_scan_token(STATE_MACHINE)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_438()) jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(VLST_BEGIN)) return true;
    if (jj_3R_279()) return true;
    if (jj_scan_token(VLST_END)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_393()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(MOD_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    if (jj_scan_token(MOD_END)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_392()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_463() {
    if (jj_3R_478()) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_3R_477()) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(IMP_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    if (jj_scan_token(IMP_END)) return true;
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_3R_475()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_460()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_462()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_463()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(TLST_BEGIN)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(TLST_END)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(XLST_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_scan_token(XLST_END)) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(PLST_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    if (jj_scan_token(PLST_END)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(ID_BEGIN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(ID_END)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(TYP_BEGIN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(TYP_END)) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_336()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(PRG_BEGIN)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(PRG_END)) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(CAT_ESCAPE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    }
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(CLS_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    if (jj_scan_token(CLS_END)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(MTH_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    if (jj_scan_token(MTH_END)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(CASE_BEGIN)) return true;
    if (jj_3R_271()) return true;
    if (jj_scan_token(CASE_END)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_136()) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(STM_BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    if (jj_scan_token(STM_END)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_3R_497()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_475() {
    if (jj_3R_491()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_492()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(EXP_BEGIN)) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(EXP_END)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_455() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(201)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BaliParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[147];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x42000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x43000000,0x0,0x0,0x0,0x0,0x42000000,0x0,0x42000000,0x0,0x0,0x2000000,0x0,0x42000000,0x0,0x0,0x43000000,0x43000000,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x42000000,0x0,0x0,0x0,0x43000000,0x0,0x43000000,0x0,0x0,0x28f80000,0x0,0x28f80000,0x0,0x42000000,0x0,0x0,0x0,0x42000000,0x42000000,0x42000000,0x42000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x43000000,0x0,0x0,0x0,0x42000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x42000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x42000000,0x0,0x0,0x40000,0x10000000,0x4000000,0x28f80000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x42000000,0x0,0x42000000,0x0,0x4000000,0x4000000,0x0,0x43000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42000000,0x0,0x42000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4000000,0xa008040a,0x0,0x50248250,0x100,0xa008040a,0x0,0xf028865a,0x4000000,0x80080008,0x0,0x716cd670,0x2080,0x50208250,0x0,0x0,0x50248250,0x0,0x50248250,0x0,0x0,0x0,0x0,0x50248250,0x0,0x0,0x716cd670,0x7164d670,0x40000,0x0,0x0,0x0,0x40000,0x100,0xf028865a,0x0,0x0,0xd0288258,0x50248250,0x80080008,0x50288250,0x0,0x716cd670,0x50288250,0x716cd670,0x0,0x0,0x0,0x0,0x0,0x50208250,0x50248250,0x0,0x80080008,0xd0288258,0x50248250,0x502c8250,0x50248250,0x50248250,0x80000,0x50288250,0x10000,0x0,0x4000000,0x0,0xd0288258,0xf0288658,0x716cd670,0xf028865a,0xa008040a,0x50288250,0x50248250,0x4000000,0x80080008,0x100,0x0,0x40000,0x80000,0x0,0x80080008,0x0,0x80080008,0x50288250,0x0,0x80080008,0x0,0x80080008,0x80080008,0x80080008,0x0,0x0,0x0,0x50208250,0x40000,0x0,0x0,0x50208250,0x0,0x0,0x0,0x50248250,0x4,0x0,0x0,0x0,0x1,0x0,0xf028865a,0x20000,0x2000000,0x0,0x0,0x0,0x5164d270,0x0,0x50248250,0x0,0x1,0x1,0x0,0x716cd670,0x2080,0x2080,0x2080,0x50208250,0x100,0x100000,0x0,0x80080008,0xa008040a,0x50248250,0x0,0x50248250,0x20000,0x2000000,0x20000,0xf0288658,0x20000402,0x2000000,0x20000,0xf0288658,0x2000000,0x20000402,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4,0x0,0x88939,0x0,0x3a251283,0x0,0x88939,0x0,0x200c89b9,0x0,0x88939,0x0,0x3a373ec3,0x0,0x40080,0x0,0x0,0x3a251283,0x0,0x3a251283,0x0,0x20000000,0x80000000,0x1,0x1a251283,0x80000000,0x0,0x3a373ec3,0x3a373ec3,0x10000,0x0,0x0,0x0,0x1a211203,0x0,0x200c89b9,0x0,0x0,0xc89b9,0x1a251283,0x88939,0x40080,0x4000,0x3a373ec3,0x40080,0x3a373ec3,0x0,0x0,0x0,0x0,0x0,0x40080,0x1a251283,0x0,0x88939,0xc89b9,0x1a251283,0x1a251283,0x1a251283,0x1a251283,0x0,0x40080,0x0,0x0,0x0,0x100,0xc89b9,0xc89b9,0x3a373ec3,0x200c89b9,0x88939,0x40080,0x1a251283,0x0,0x88939,0x0,0x0,0x1a210002,0x0,0x20000000,0x88939,0x4000,0x88939,0x40080,0x80000000,0x88939,0x0,0x88939,0x88939,0x88939,0x0,0x0,0x4,0x40080,0x1a211203,0x0,0x80000000,0x40080,0x0,0x0,0x0,0x1a251283,0x0,0x0,0x0,0x0,0x0,0x0,0x200c89b9,0x0,0x0,0x0,0x0,0x0,0x3a373ec3,0x0,0x1a251283,0x0,0x0,0x0,0x0,0x3a373ec3,0x0,0x0,0x0,0x40080,0x0,0x0,0x0,0x88939,0x88939,0x1a251283,0x0,0x1a251283,0x0,0x0,0x0,0xc89b9,0x0,0x0,0x0,0xc89b9,0x0,0x0,0x0,0x0,0x80000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2,0x4,0x1e0180,0x0,0x2,0x4,0x0,0x0,0x0,0x4,0x1e0182,0x0,0x0,0x4,0x4,0x1e0180,0x4,0x1e0180,0x180000,0x0,0x0,0x0,0x1e0180,0x0,0xc0000010,0x1e0182,0x1e0182,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x1e0180,0x0,0x0,0x0,0x1e0182,0x0,0x1e0182,0x0,0x4,0x0,0x4800,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x1e0180,0x60000,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x1e0182,0x0,0x2,0x0,0x1e0180,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x4600000,0x0,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x4,0x3060,0x1e0180,0x0,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x1e0182,0xc0060010,0x60000,0x4,0x0,0x0,0xc0060010,0x1e0182,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x1e0180,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x100000,0x0,0xed249a00,0x20000,0x100000,0x0,0x60000000,0x0,0x0,0x0,0xed249200,0x4000,0x60000000,0x0,0x0,0xed249a00,0x0,0xed249200,0x0,0x0,0x0,0x0,0xed249200,0x0,0x1ff,0xed249200,0xed249200,0x0,0x60000000,0x0,0x0,0x0,0x20000,0x60000000,0x0,0x0,0x60000000,0xed249200,0x0,0x60000000,0x0,0xed249200,0x60000000,0xed249200,0x60000000,0x0,0x0,0x0,0x0,0x60000000,0x64000000,0x60000000,0x0,0x60000000,0x64800000,0x64800000,0xed249200,0x64800000,0x0,0x60000000,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0xed249200,0x60000000,0x100000,0x60000000,0xed249200,0x0,0x0,0x20000,0x89249200,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x4000000,0x60000000,0x0,0x0,0x60000000,0x0,0x0,0xed249200,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x0,0x60000000,0x0,0x0,0xed249200,0x1ff,0x64800000,0x0,0x0,0x0,0x1ff,0xed249200,0x4000,0x0,0x4000,0x60000000,0x20000,0x0,0x0,0x0,0x100000,0x64000000,0x0,0x64000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x60000000,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x2,0x10,0x0,0xa6d32924,0x0,0x10,0x0,0x400090,0x2,0x10,0x0,0xa4d3a924,0x0,0x400000,0x0,0x0,0xa6d32924,0x0,0xa6d32924,0x0,0x0,0x0,0x0,0xa4d32924,0x0,0x0,0xa4d3a924,0xa4d3a924,0x0,0x0,0x0,0x0,0x0,0x0,0x400090,0x0,0x80,0x400010,0xa4d32924,0x10,0x400400,0x0,0xa4d3a924,0x400400,0xa4d3a924,0x0,0x0,0x0,0x0,0x0,0x480000,0x410000,0x0,0x10,0x400010,0x410000,0x410000,0xa4d32924,0x410000,0x0,0x400400,0x0,0x0,0x2,0x0,0x400010,0x400010,0xa4d3a924,0x400090,0x10,0x400400,0xa4d32924,0x2,0x10,0x0,0x24922924,0x0,0x0,0x0,0x10,0x0,0x10,0x400400,0x0,0x10,0x0,0x10,0x10,0x10,0x0,0x0,0x0,0x480000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0xa4d32924,0x0,0x0,0x0,0x0,0x0,0x0,0x400090,0x0,0x0,0x0,0x0,0x8000,0xa4d32924,0x0,0x410000,0x0,0x0,0x0,0x0,0xa4d3a924,0x0,0x0,0x0,0x480000,0x0,0x0,0x0,0x10,0x10,0x410000,0x0,0x410000,0x0,0x0,0x0,0x400010,0x0,0x0,0x0,0x400010,0x0,0x0,0x0,0x10000000,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x100,0x0,0x1870,0x0,0x1200,0x0,0x1870,0x0,0x1034,0x0,0x10,0x0,0x1205,0x0,0x1000,0x0,0x0,0x1200,0x0,0x1200,0x0,0x0,0x0,0x0,0x1200,0x0,0x0,0x1205,0x1205,0x0,0x1000,0x0,0x0,0x1200,0x0,0x1034,0x20,0x0,0x1014,0x1200,0x10,0x1000,0x0,0x1205,0x1000,0x1205,0x1000,0x0,0x0,0x0,0x0,0x1000,0x1200,0x1000,0x10,0x1014,0x1200,0x1200,0x1200,0x1200,0x0,0x1000,0x0,0x0,0x0,0x0,0x1014,0x1014,0x1205,0x1034,0x1870,0x1000,0x1200,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x10,0x1000,0x0,0x10,0x0,0x10,0x10,0x10,0x0,0x0,0x100,0x1000,0x200,0x1000,0x0,0x0,0x1000,0x0,0x0,0x1200,0x0,0x0,0x0,0x0,0x0,0x0,0x1034,0x0,0x0,0x1000,0x1,0x4,0x1200,0x0,0x1200,0x0,0x0,0x0,0x0,0x1205,0x0,0x0,0x0,0x1000,0x0,0x0,0x80,0x10,0x1870,0x1200,0x0,0x1200,0x0,0x0,0x0,0x1014,0x20,0x0,0x0,0x1014,0x0,0x20,0x0,0x1000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[64];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BaliParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BaliParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BaliParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BaliParser(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 147; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[206];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 147; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 206; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 64; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
