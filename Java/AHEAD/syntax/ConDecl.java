// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.



public class ConDecl extends ConstructorDeclaration {

    final public static int ARG_LENGTH = 6 ;
    final public static int TOK_LENGTH = 4 ;

    public AST_Modifiers getAST_Modifiers () {
        
        AstNode node = arg[0].arg [0] ;
        return (node != null) ? (AST_Modifiers) node : null ;
    }

    public AST_ParList getAST_ParList () {
        
        AstNode node = arg[2].arg [0] ;
        return (node != null) ? (AST_ParList) node : null ;
    }

    public AST_Stmt getAST_Stmt () {
        
        AstNode node = arg[5].arg [0] ;
        return (node != null) ? (AST_Stmt) node : null ;
    }

    public ExplicitConstructorInvocation getExplicitConstructorInvocation () {
        
        AstNode node = arg[4].arg [0] ;
        return (node != null) ? (ExplicitConstructorInvocation) node : null ;
    }

    public QName getQName () {
        
        return (QName) arg [1] ;
    }

    public ThrowsClause getThrowsClause () {
        
        AstNode node = arg[3].arg [0] ;
        return (node != null) ? (ThrowsClause) node : null ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {false, false, true, false, true, false, true, false, false, true} ;
    }

    public ConDecl setParms
    (AstOptNode arg0, QName arg1, AstToken tok0, AstOptNode arg2, AstToken tok1, AstOptNode arg3, AstToken tok2, AstOptNode arg4, AstOptNode arg5, AstToken tok3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        arg [0] = arg0 ;            /* [ AST_Modifiers ] */
        arg [1] = arg1 ;            /* QName */
        tok [0] = tok0 ;            /* "(" */
        arg [2] = arg2 ;            /* [ AST_ParList ] */
        tok [1] = tok1 ;            /* ")" */
        arg [3] = arg3 ;            /* [ ThrowsClause ] */
        tok [2] = tok2 ;            /* "{" */
        arg [4] = arg4 ;            
        /* [ LOOKAHEAD(ExplicitConstructorInvocation())
        			ExplicitConstructorInvocation ] */
        arg [5] = arg5 ;            /* [ AST_Stmt ] */
        tok [3] = tok3 ;            /* "}" */
        
        InitChildren () ;
        return (ConDecl) this ;
    }

}
