<?xml version="1.0" encoding="UTF-8"?>
<modificationComposition>
	<!-- imports -->
	<modification>
		<type>introduction</type>
		<traversal>..AttributeFigure*:ClassDeclaration || ..EllipseFigure*:ClassDeclaration || ..RectangleFigure*:ClassDeclaration || ..RoundRectangleFigure*:ClassDeclaration || ..TriangleFigure*:ClassDeclaration || ..TextAreaFigure*:ClassDeclaration || ..HTMLTextAreaFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
						import org.jhotdraw.*;
					</text>
					<tType>java.import</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..AttributeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		if (fAttributes == null) {
			dw.writeString("no_attributes");
		}
		else {
			dw.writeString("attributes");
			fAttributes.write(dw);
		}
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..AttributeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ { 
		super.read(dr);
		String s = dr.readString();
		if (s.toLowerCase().equals("attributes")) {
			fAttributes = new FigureAttributes();
			fAttributes.read(dr);
		}
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..EllipseFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fDisplayBox.x);
		dw.writeInt(fDisplayBox.y);
		dw.writeInt(fDisplayBox.width);
		dw.writeInt(fDisplayBox.height);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..EllipseFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);
		fDisplayBox = new Rectangle(
			dr.readInt(),
			dr.readInt(),
			dr.readInt(),
			dr.readInt());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PolygonFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(pointCount());
		for (int i = 0; i < pointCount(); ++i) {
			dw.writeInt(getInternalPolygon().xpoints[i]);
			dw.writeInt(getInternalPolygon().ypoints[i]);
		}
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PolygonFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);
		int size = dr.readInt();
		int[] xs = new int[size];
		int[] ys = new int[size];
		for (int i = 0; i < size; i++) {
			xs[i] = dr.readInt();
			ys[i] = dr.readInt();
		}
		setInternalPolygon(new Polygon(xs, ys, size));
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..RectangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fDisplayBox.x);
		dw.writeInt(fDisplayBox.y);
		dw.writeInt(fDisplayBox.width);
		dw.writeInt(fDisplayBox.height);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..RectangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);
		fDisplayBox = new Rectangle(
			dr.readInt(),
			dr.readInt(),
			dr.readInt(),
			dr.readInt());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..RoundRectangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fDisplayBox.x);
		dw.writeInt(fDisplayBox.y);
		dw.writeInt(fDisplayBox.width);
		dw.writeInt(fDisplayBox.height);
		dw.writeInt(fArcWidth);
		dw.writeInt(fArcHeight);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..RoundRectangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);
		fDisplayBox = new Rectangle(
			dr.readInt(),
			dr.readInt(),
			dr.readInt(),
			dr.readInt());
		fArcWidth = dr.readInt();
		fArcHeight = dr.readInt();
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..TriangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fRotation);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..TriangleFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);
		fRotation = dr.readInt();
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..TextAreaFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fDisplayBox.x);
		dw.writeInt(fDisplayBox.y);
		dw.writeInt(fDisplayBox.width);
		dw.writeInt(fDisplayBox.height);
		dw.writeString(fText);
		dw.writeBoolean(fIsReadOnly);
		dw.writeStorable(fObservedFigure);
		dw.writeStorable(fLocator);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..TextAreaFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);

		markSizeDirty();
		markTextDirty();
		markFontDirty();

		fDisplayBox.x = dr.readInt();
		fDisplayBox.y = dr.readInt();
		fDisplayBox.width = dr.readInt();
		fDisplayBox.height = dr.readInt();
		fText = dr.readString();
		fIsReadOnly = dr.readBoolean();

		fObservedFigure = (Figure)dr.readStorable();
		if (fObservedFigure != null) {
			fObservedFigure.addFigureChangeListener(this);
		}
		fLocator = (OffsetLocator)dr.readStorable();

		setFont(createFont());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..HTMLTextAreaFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ {
		super.read(dr);

		setFrameFigure((Figure)dr.readStorable());
		setUseDirectDraw(dr.readBoolean());
		setRawHTML(dr.readBoolean());
//		setIntrinsicContentProducer((ContentProducer)dr.readStorable());
//		fContentProducers.read(dr);

//        // finally add the popup menu
//        setAttribute(Figure.POPUP_MENU, createPopupMenu());

	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..HTMLTextAreaFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);

		dw.writeStorable(getFrameFigure());
		dw.writeBoolean(usesDirectDraw());
		dw.writeBoolean(isRawHTML());
//		dw.writeStorable(getIntrinsicContentProducer());
//		fContentProducers.write(dw);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
</modificationComposition>
