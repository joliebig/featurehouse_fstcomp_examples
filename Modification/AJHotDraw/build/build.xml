<?xml version="1.0"?>

<project name="AJHotDraw" default="main" basedir=".">

  <property file="${user.home}/.ant.properties"/>
  <property file="${user.name}.build.properties"/>
  
  <!-- Marius: dest.dir to be set in the properties file: dest.dir=.. -->
  <property name="build.classes" value="${dest.dir}/classes"/>
  <property name="build.jar.name" value="ajhotdraw.jar"/>
  <property name="build.jar" value="${dest.dir}/${build.jar.name}"/>
  <property name="src.jar" value="${dest.dir}/ajhotdraw-src.jar"/>
  <property name="deploy.dir" value="${dest.dir}/deploy"/>
  <property name="version" value="0.5"/>
  <property name="src.zip.file" value="${deploy.dir}/ajhotdraw-${version}-src.zip"/>
	
  <property name="src.dir" value="../src"/>
  <property name="images.dir" value="org/jhotdraw/images"/>
  <property name="javadraw.images.dir" value="org/jhotdraw/samples/javadraw/sampleimages"/>
  <property name="pert.images.dir" value="org/jhotdraw/samples/pert/images"/>

  <property name="javadoc.dir" value="${dest.dir}/javadoc"/>
  <property name="mk.dir" value="${dest.dir}/build"/>
  
  <property name="javac.deprecation" value="off"/>
  <property name="javac.includes" value="**/*.java"/>

  <property name="needs.batik.src" value="**/SVG*.java"/>
  <property name="needs.jdo.src" value="**/JDOStorageFormat.java"/>

  <!--
  <property name="needs.batik.class" value="org.jhotdraw.contrib.SVG*"/>
  <property name="needs.jdo.class" value="org.jhotdraw.util.JDOStorageFormat"/>
  -->
  <property environment="env"/>

  <!-- =================================================================== -->
  <!-- Check env properties                                                -->
  <!-- =================================================================== -->
  <target name="checkProperty" unless="${property.name}">
      <fail message="You must configure property: ${property.name} in your properties file."/>
  </target>

  <target name="checkenv">
      <antcall target="checkProperty">
          <param name="property.name" value="aspectj.home"/>
      </antcall>
  </target>

  <!-- =================================================================== -->
  <!-- Set timestamp and check for optional packages                       -->
  <!-- =================================================================== -->
  <target name="init" depends="checkenv">
	<mkdir dir="${dest.dir}"/>
  	<tstamp/>

  	<path id="project.class.path">
        <fileset dir="${aspectj.home}/lib" includes="**/*.jar"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${jdo.class.path}"/>
        <pathelement path="${batik.class.path.dom}"/>
        <pathelement path="${batik.class.path.svggen}"/>	
        <pathelement path="${batik.class.path.awt-util}"/>
        <pathelement path="${batik.class.path.util}"/> 
    </path>

    <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
        <classpath refid="project.class.path" />
    </taskdef>

  </target>

  <target name="display.properties" depends="init, check_for_optional_packages">

  	<echo message="project.class.path = ${project.class.path}"/>
  	
	<echo message="java.class.path = ${java.class.path}"/>
  	<echo message="jdo.class.path = ${jdo.class.path}"/>
  	<echo message="batik.class.path.dom = ${batik.class.path.dom}"/>
  	<echo message="batik.class.path.svggen = ${batik.class.path.svggen}"/>
  	<echo message="batik.class.path.awt-util = ${batik.class.path.awt-util}"/>
  	<echo message="batik.class.path.util = ${batik.class.path.util}"/>
 
  	<echo message="batik.available = ${batik.available}"/>
  	<echo message="jdo.available = ${jdo.available}"/>
  	
	<echo message=""/>
	<echo message="java.home = ${java.home}"/>
	<echo message="user.home = ${user.home}"/>
	<echo message="ant.home = ${ant.home}"/>
	<echo message=""/>
	   
  </target>	
	
	
  <target name="check_for_optional_packages">
	
  	<!-- Marius - added for the multiple batik files needed;
  	Set the right path in ${user.name}.build.properties -->
  	<condition property="batik.available">
  		<and>
		  	<available file="${batik.class.path.dom}"/> 
 			<available file="${batik.class.path.svggen}"/>
	  		<available file="${batik.class.path.awt-util}"/>
  			<available file="${batik.class.path.util}"/>
  		</and>
  	</condition>
  	<available property="jdo.available" file="${jdo.class.path}"/>
	
  	<!-- <available property="namingstrategy.available" file="${namingstrategy.class.path}"/> -->

  	<!-- <fail unless="jdo.available" > jdo not available </fail> -->
 	<!-- <fail unless="batik.available" > batik not available </fail>  -->
  </target>

  <!-- =================================================================== -->
  <!-- Builds a complete package with all files from scratch               -->
  <!-- =================================================================== -->
  <target name="all" depends="clean, main, zip">
  </target>

  <!-- =================================================================== -->
  <!-- Builds a package with all essential files                           -->
  <!-- ================================================================== -->
  <target name="main" depends="init, compile, copy_resources, jar, src-jar">
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source code and place the generated class files in a directory -->
  <!-- =================================================================== -->
  <target name="compile" 
	    depends="init, check_for_optional_packages, delete_dependants" 
        description="Compiles the source code">

    <iajc destdir="${build.classes}" incremental="false" source="1.4"
        sourceRootCopyFilter="**/*.java,**/*.aj,**/CVS/**,**/*~,**/*#*,**/.#*,**/%*%,**/.cvsignore">

    	<src location="${src.dir}/aspects"/>

        <exclude name="**/CVS/*"/> 
	    <exclude name="${needs.batik.src}" unless="batik.available"/>
	    <exclude name="${needs.jdo.src}" unless="jdo.available"/>

    	<classpath refid="project.class.path"/>
<!--
   	<classpath>
	  <pathelement path="${java.class.path}"/>
	  <pathelement path="${jdo.class.path}"/>
	  <pathelement path="${batik.class.path.dom}"/>
      <pathelement path="${batik.class.path.svggen}"/>	
      <pathelement path="${batik.class.path.awt-util}"/>
      <pathelement path="${batik.class.path.util}"/> 
    </classpath>
-->
<!-- just some tests for the classpath
  	
  	<property name="print.classpath" refid="project.class.path" />
  	<echo message="project.class.path = ${print.classpath}" />

--> 

    </iajc>

    <echo> compilation finished ... </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code and place the generated class files in a jar -->
  <!-- =================================================================== -->
  <!-- Not used yet - see how the aspectj bug is fixed
  <target name="compiletojar" 
	    depends="init, check_for_optional_packages, delete_dependants" 
        description="Compiles the source code into a jar">

  	<iajc outJar="${build.jar}" incremental="false" source="1.4"
        sourceRootCopyFilter="**/*.java,**/*.aj,**/CVS/**,**/*~,**/*#*,**/.#*,**/%*%,**/.cvsignore"
  		Xreweavable="true">
	    
	    <src location="${src.dir}/aspects"/>

  	    <exclude name="**/CVS/*"/> 
	    <exclude name="${needs.batik.src}" unless="batik.available"/>  
	    <exclude name="${needs.jdo.src}" unless="jdo.available"/> 

  		<classpath refid="project.class.path"/>  
	    </iajc>

  	<echo> compilation finished ... </echo>
  </target>
  -->
	
  <target name="delete_dependants" unless="iajc.nodepend">
    <depend srcdir="${src.dir}/aspects" destdir="${build.classes}"
            cache="depcache" closure="yes">
      <include name="${javac.includes}"/>
      <exclude name="${needs.batik.src}" unless="batik.available"/>
      <exclude name="${needs.jdo.src}"  unless="jdo.available"/>
    </depend>
  </target>

  <!-- =================================================================== -->
  <!-- Copies the resources into the build target directory                -->
  <!-- Resources are non-code that needs to be packed into some jar file   -->
  <!-- in their package structure, such as .gif, .properties, .html, etc.  -->
  <!-- =================================================================== -->
  <target name="copy_resources" >
    <copy toDir="${build.classes}">
      <fileset dir="${src.dir}/aspects">
         <include name ="**/*.gif" />
         <include name ="**/*.html" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean" description="Cleans up generated stuff.">
    <delete file="${build.jar}"/>
    <delete file="${src.jar}"/>
	<delete dir="${build.classes}"/>
    <delete dir="${javadoc.dir}"/>
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- The next section defines the Jar file layout.                       -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile, copy_resources" description="Compiles the source code into a jar">
  	<jar jarfile="${build.jar}"> 
      <fileset dir="${build.classes}">
        <include name="org/jhotdraw/**"/>
      </fileset>
	</jar>
  </target>

  <!-- =================================================================== -->
  <!-- Source jar                                                          -->
  <!-- =================================================================== -->
  <target name="src-jar" description="Generates jar file containing the source classes">
  	<jar jarfile="${src.jar}"> 
      <fileset dir="../src/aspects">
        <include name="**/*.java"/>
        <include name="**/*.aj"/>
      </fileset>
	</jar>
  </target>

  <!-- =================================================================== -->
  <!-- Create a zip file with all sources                       -->
  <!-- =================================================================== -->
  <target name="zip" description="Source distribution of ajhd">
    <property name="tmp.dir" value="${deploy.dir}/ajhotdraw-${version}-src"/>
    <delete dir="${deploy.dir}"/>
    <mkdir dir="${tmp.dir}"/>
    <copy todir="${tmp.dir}">
      <fileset dir="../" includes="src/aspects/**/*.*"/>
      <fileset dir="../" includes="doc/libraries.txt"/>
      <fileset dir="../" includes="doc/README.txt"/>
      <fileset dir="../" includes="build/build.xml"/>
    </copy>
    <zip basedir="${deploy.dir}"
        destfile="${deploy.dir}/ajhotdraw-${version}-src.zip">
      <fileset dir="${tmp.dir}"
          includes="${tmp.dir}/**/*"/>
    </zip>
    <delete dir="${tmp.dir}"/>
  </target>

	
  <!-- =================================================================== -->
  <!-- Run examples (and compile if necessary).                            -->
  <!-- =================================================================== -->
  <path id="example_path">
    <!--<pathelement path="${java.class.path}/"/>-->
  	<path refid="project.class.path" />
  	<pathelement path="${build.jar}"/>
  	<!-- Marius: use the next pathelement instead of the jar
  	to have the images in the Images menu found -->
    <!--<pathelement path="${dest.dir}/"/> -->
  </path>
  
  <target name="javadraw" depends="main" description="Runs the javadraw app">
     <java classname="org.jhotdraw.samples.javadraw.JavaDrawApp" fork="yes">
       <classpath>
        <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="pert" depends="main" description="Runs the pert app">
     <java classname="org.jhotdraw.samples.pert.PertApplication" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="net" depends="main" description="Runs the net app">
     <java classname="org.jhotdraw.samples.net.NetApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="nothing" depends="main" description="Runs the nothing app">
     <java classname="org.jhotdraw.samples.nothing.NothingApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="svgdraw" depends="main" if="batik.available" description="Runs the svgdraw app">
     <java classname="org.jhotdraw.contrib.SVGDrawApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
         <pathelement path="${env.CLASSPATH}"/>
       </classpath>
     </java>
  </target>
</project>

