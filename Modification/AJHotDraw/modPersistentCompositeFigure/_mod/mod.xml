<?xml version="1.0" encoding="UTF-8"?>
<modificationComposition>
	<modification>
		<type>introduction</type>
		<traversal> ..CompositeFigure*:ClassDeclaration || ..GraphicalCompositeFigure*:ClassDeclaration || ..PertFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
						import org.jhotdraw.*;
					</text>
					<tType>java.import</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..CompositeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		int cnt = figureCount();
		dw.writeInt(cnt);
		FigureEnumeration fe = figures();
		int i = 0;
		while (fe.hasNextFigure()) {
			i++;
			Figure f = fe.nextFigure();
			assert f != null;
			dw.writeStorable(f);
		}
		assert cnt == i;
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..CompositeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /*@AJHD refactored throws IOException*/ { 
		super.read(dr);
		int size = dr.readInt();
		fFigures = CollectionsFactory.current().createList(size);
	
		for (int i=0; i<size; i++) {
			Storable s = dr.readStorable();
			assert s != null : "reading null storable";
			add((Figure)s);
		}
		init(displayBox());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..GraphicalCompositeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /* AJHD refactored throws IOException */ {
		super.read(dr);
		setPresentationFigure((Figure) dr.readStorable());
		setLayouter((Layouter) dr.readStorable());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..GraphicalCompositeFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeStorable(getPresentationFigure());
		dw.writeStorable(getLayouter());
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PertFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeInt(fDisplayBox.x);
		dw.writeInt(fDisplayBox.y);
		dw.writeInt(fDisplayBox.width);
		dw.writeInt(fDisplayBox.height);

		writeTasks(dw, fPreTasks);
		writeTasks(dw, fPostTasks);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PertFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void writeTasks(StorableOutput dw, List l) {
		dw.writeInt(l.size());
		Iterator iter = l.iterator();
		while (iter.hasNext()) {
			dw.writeStorable((Storable)iter.next());
		}
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PertFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public void read(StorableInput dr) /* AJHD refactored throws IOException */ {
		super.read(dr);
		fDisplayBox = new Rectangle(
			dr.readInt(),
			dr.readInt(),
			dr.readInt(),
			dr.readInt());
		layout();
		fPreTasks = readTasks(dr);
		fPostTasks = readTasks(dr);
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
	<modification>
		<type>introduction</type>
		<traversal>..PertFigure*:ClassDeclaration</traversal>
		<content>
			<parsed>
				<plainText>
					<text>
	public List readTasks(StorableInput dr) /* AJHD refactored throws IOException */ {
		int size = dr.readInt();
		List l = CollectionsFactory.current().createList(size);
		for (int i=0; i<size; i++) {
			l.add(dr.readStorable());
		}
		return l;
	}
					</text>
					<tType>java.method</tType>
				</plainText>
			</parsed>
		</content>
	</modification>
</modificationComposition>
