module generation/service

rules

  definition-to-js :
    Service(_, qid, selem*) -> <emit> $[
      [<qid-to-js> qid] = {
        [body]
      };
      ]
    with body := <map(service-elem-to-js); separate-by(|",\n")> selem*

  service-elem-to-js :
    Resource(_, x, farg*, rt, prop*) ->
    $[[x]: function([fargs]) {
        var url = [url];
        $.ajax({
           url: url,
           dataType: [<expression-to-js> encoding],
           type: [<expression-to-js> method],
           [data-property]
           error: function(_, message, error) {
             console.error(message);
             console.error(error);
             callback(null);
           },
           success: function(data) {
              var result = [<expression-to-js> mapper](data, callback);
              if(result !== undefined) {
                callback(result);
              }
           }
        });
      }
   ]
  with fargs := <filter(farg-to-js); <concat> [<id>, ["callback"]]; separate-by(!", "); concat-strings> farg*
     ; <fetch(?PropVal("uri", uri)) <+ uri := String($["/[x]"])> prop*
     ; <fetch(?PropVal("encoding", encoding)) <+ encoding := String("\"json\"")> prop*
     ; <fetch(?PropVal("mapper", mapper)) <+ mapper := Var(QId("mobl", "dummyMapper"))> prop*
     ; <fetch(?PropVal("method", method)) <+ method := String("\"GET\"")> prop*
     ; <fetch(?PropVal("data", data-exp)) <+ data-exp := String("\"\"")> prop*
     ; url := <build-service-url> (uri, method)
     ; if not(String("\"GET\"") := method) then
         data-property := $[data: [<expression-to-js> data-exp],]
       else
         data-property := ""
       end