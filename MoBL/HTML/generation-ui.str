module generation-ui

rules

 elems-to-js(|root) :
    [tg@Html(tag, arg*, elems, _)|rest*] -> $[
      var [node] = $("<[tag]>");
      [<filter(tag-arg-to-js(|tg, node)); concat-strings> arg*]
      [body]
    ]
    with //args := <filter(tag-arg-to-html); separate-by(!" "); concat-strings> arg*
       node := <newname> "node"
       ; body := <elems-to-js(|node)> <concat> [elems, [
           $[[root].append([node]);
           [<elems-to-js(|root)> rest*]]]]
  elems-to-js(|root) :
    [tg@NamedHtml(x, tag, arg*, elems, _)|rest*] -> $[
      var [x] = $("<[tag]>");
      [<filter(tag-arg-to-js(|tg, x)); concat-strings> arg*]
      [body]
    ]
    with //args := <filter(tag-arg-to-html); separate-by(!" "); concat-strings> arg*
       body := <elems-to-js(|x)> <concat> [elems, [
           $[[root].append([x]);
           [<elems-to-js(|root)> rest*]]]]

 tag-arg-to-js(|tg, node) :
    HtmlArg(name, True()) -> $[[node].attr('[name]', true);
]

  tag-arg-to-js(|tg, node) :
    HtmlArg(name, False()) -> $[[node].attr('[name]', false);
]

  tag-arg-to-js(|tg, node) :
    HtmlArg(name, String(s)) -> $[[node].attr('[name]', [s]);
]

  tag-arg-to-js(|tg, node) :
    HtmlArg(name, e) -> $[
      var [r] = [es];
      if([r].get() !== null) {
        [node].attr('[name]', [r].get());
        subs__.addSub([r].addEventListener('change', function(_, ref, val) {
          [node].attr('[name]', val);
        }));
        [subscriptions]
      }
      subs__.addSub([r].rebind());
    ]
    where not(String(_) := e <+ True() := e <+ False() := e)
        ; not(SimpleType(QId("mobl", "Callback")) := <type-of> e <+ GenericType(QId("mobl", "Function0"), _) := <type-of> e)
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"
       ; watch-expr* := <find-watchable-expressions> e
       ; subscriptions := <map(exp-to-html-watcher-js(|node, name, <expression-to-js> e)); concat-strings> watch-expr*

  tag-arg-to-js(|tg, node) :
    HtmlArg(name, e) -> $[
      var [val] = [es];
      if([val] !== null) {
        subs__.addSub(mobl.domBind([node], '[<string-replace(|"on", "")> name]', [val]));
      }
    ]
    where (SimpleType(QId("mobl", "Callback")) := <type-of> e
        <+ GenericType(QId("mobl", "Function0"), _) := <type-of> e)
        ; not("onclick" := name)
    with es := <expression-to-js> e
       ; val  := <newname> "val"
  tag-arg-to-js(|tg, node) :
    HtmlArg("onclick", e) -> $[
      var [val] = [es];
      if([val] !== null) {
        subs__.addSub(mobl.domBind([node], 'tap', [val]));
      }
    ]
    where (SimpleType(QId("mobl", "Callback")) := <type-of> e
        <+ GenericType(QId("mobl", "Function0"), _) := <type-of> e)
    with es := <expression-to-js> e
       ; val  := <newname> "val"
  tag-arg-to-js(|tg, node) :
    HtmlDatabindArg(e) -> $[
      var [r] = [es];
      [node].[method](""+[r].get());
      var [ignore] = false;
      subs__.addSub([r].addEventListener('change', function(_, ref, val) {
        if([ignore]) return;
        [node].[method](""+val);
      }));
      subs__.addSub([r].rebind());
      [subs][subscriptions]
    ]
    where (Html(tag, arg*, _, _) := tg
        <+ NamedHtml(_, tag, arg*, _, _) := tg)
        ; [] := <filter(?HtmlArg("type", String("\"checkbox\"")))> arg*
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"
       ; ignore := <newname> "ignore"
       ; typeconverter := <concat-strings> ["mobl.stringTo", <type-of; ?SimpleType(<id>); qid-to-html> e]
       ; if "input" := tag <+ "textarea" := tag then
           method := "val"
           ; subs := $[
               subs__.addSub(mobl.domBind([node], 'keyup change', function() {
                 [ignore] = true;
                 [es].set([typeconverter]([node].[method]()));
                 [ignore] = false;
               }));
             ]
         else
           if "select" := tag then
             method := "val"
             ; subs := $[
               subs__.addSub(mobl.domBind([node], 'change', function() {
                   [ignore] = true;
                   [es].set([typeconverter]([node].[method]()));
                   [ignore] = false;
                 }));
               ]
           else
             method := "text"
             ; subs := ""
           end
         end
         ; watch-expr* := <find-watchable-expressions> e
         ; subscriptions := <map(exp-to-html-databind-watcher-js(|node, method, <expression-to-js> e)); concat-strings> watch-expr*

  tag-arg-to-js(|tg, node) :
    HtmlDatabindArg(e) -> $[
      var [r] = [es];
      [node].attr('checked', !![r].get());
      subs__.addSub([r].addEventListener('change', function(_, ref, val) {
        if(ref === [r]) [node].attr('checked', !!val);
      }));
      subs__.addSub(mobl.domBind([node], 'change', function() {
        [es].set(!![node].attr('checked'));
      }));
    ]
    where (Html(tag, arg*, _, _) := tg
        <+ NamedHtml(_, tag, arg*, _, _) := tg)
        ; not([] := <filter(?HtmlArg("type", String("\"checkbox\"")))> arg*)
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"